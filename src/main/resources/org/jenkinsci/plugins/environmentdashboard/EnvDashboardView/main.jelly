<?xml version="1.0"?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
<link href="${rootURL}/plugin/environment-dashboard/css/bootstrap.min.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/bootstrap-theme.min.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/blink.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/dropdown_button.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/dynamic_dialog.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/jquery.datetimepicker.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/jquery-ui.css" type="text/css" rel="stylesheet"/>
<script src="${rootURL}/plugin/environment-dashboard/js/jquery.datetimepicker.full.min.js"></script>
<script src="${rootURL}/plugin/environment-dashboard/js/jquery.validate.js"></script>
<script src="${rootURL}/plugin/environment-dashboard/js/jquery-ui.js"></script>
<div class="overlay" style="display:none; background-color: rgba(0, 0, 0, 0.4); position:absolute; top: 0; left:0; bottom:0; right:0;" onclick="hideAll()"></div>
<div class="popup" id="popup" style="position: absolute; width: 300px; height:150; display:none; background-color: white; text-align: center; top:50%; left:50%; margin-left: -150px; margin-top: -75;"></div>
<div id="startDashboard" style="margin-left: -360px; margin-right: 360px;">
	<input type="text" id="searchInput" style="width: 100%; font-size: 16px; padding: 12px 20px 12px 40px; border: 1px solid #ddd; margin-bottom: 12px;" onkeyup="filterTable()" placeholder="Search for clients.." title="Type in a client"/>
	<table id="envDashboard" class="table table-bordered table-striped table-condensed">
		<tbody>
			<j:switch on="${it.anyJobsConfigured()}">
				<j:case value="NONE">
					<tr>
						<div class="jumbotron">
							<h2>Hi, there!</h2>
							<p>You possibly haven't set up any jobs to use the Dashboard. Or if you have, the job hasn't run atleast once. You can configure the jobs by using the 'Details for Environment Dashboard' checkbox.</p>
						</div>
					</tr>
				</j:case>
				<j:case value="ENVS">
					<tr align="center">
						<th/>
						<j:set var="orderOfEnvs" value="${it.getOrderOfEnvs()}"/>
						<j:set var="orderOfComps" value="${it.getOrderOfComps()}"/>
						<j:set var="customColumnsList" value="${it.getCustomDBColumns()}"/>
						


						<j:forEach items="${orderOfEnvs}" var="envsHeader">
							<th style="text-align:center">
								<a style="text-decoration:none" title="View environment history" id="${envsHeader}_Header" href="javascript:toggle('${envsHeader}_History');">${envsHeader}</a>
								<div id="${envsHeader}_History" style="display: inline-block; position: fixed; top: 100; bottom: 100; left: 0; right: 0; width: 900px; height: 600px; position:fixed; margin: auto; padding: 10px; background-color: #FEFEFE; border: 1px solid; border-color: #DDDDDD; box-shadow: 1px 2px 1px #AAAAAA; border-radius: 15px; display:none; overflow: auto; overflow-x:hidden;">
									<div align="right">
										<b onclick="javascript:hideAll()" style="cursor: pointer">[X]</b>
									</div>
									<h3>${envsHeader}</h3>
									 <table class="table table-bordered table-striped table-condensed">
										<j:set var="limitDeploy" value="${it.getLimitDeployHistory()}"/>
										<tbody>
											<th style="text-align:center">Component</th>
											<th style="text-align:center">Build</th>

											<j:set var="hasPackageColumn" value="${false}"/>
											<j:forEach items="${it.getDeployments(envsHeader, limitDeploy)}" var="time">
												<j:if test="${it.getCompDeployed(envsHeader,time).get('packageName') != null &amp;&amp; !it.getCompDeployed(envsHeader,time).get('packageName').equals('')}">
													<j:set var="hasPackageColumn" value="${true}"/>
												</j:if>
											</j:forEach>
											<j:if test="${hasPackageColumn}">
												<th style="text-align:center">Package</th>
											</j:if> 
											<th style="text-align:center">Last Update</th>
										</tbody>
										<j:forEach items="${it.getDeployments(envsHeader, limitDeploy)}" var="time">
										<j:set var="deployment" value="${it.getCompDeployed(envsHeader,time)}"/>
											<tr>
												<td>${deployment.get("compName")}</td>
												<td>
													<j:switch on="${deployment.get('buildstatus')}">
														<a title="View" href="${deployment.get('buildJobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get("buildNum")}</a>
														<j:case value="SUCCESS">
															<span title="SUCCESS" style="color:green;">&#10004;</span>
														</j:case>
														<j:case value="FAILURE">
															<span title="FAILURE" style="color:darkred;">&#x2716;</span>
														</j:case>
														<j:case value="RUNNING">
															<span title="RUNNING" style="color:blue;">&#9658;</span>
														</j:case>
														<j:default>
															<span title="UNKNOWN" style="color:orange;">&#63;</span>
														</j:default>
													</j:switch>
												</td>
												<j:if test="${hasPackageColumn}">
													<td>
														${deployment.get("packageName")}
													</td>
												</j:if>
												<td>
													<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(time)}</a>
												</td>
											</tr>
										</j:forEach>
									</table>
								</div>

								<!-- Popup per Env per Component  -->
								<j:forEach items="${orderOfComps}" var="comp">
									<j:set var="compLastDeployed" value="${it.getCompLastDeployed(envsHeader, comp)}"/>
									<div id="${comp}_${envsHeader}_Popup" style="display: inline-block; position: fixed; top: 100; bottom: 100; left: 0; right: 0; width: 900px; height: 600px; position:fixed; margin: auto; padding: 10px; background-color: #FEFEFE; border: 1px solid; border-color: #DDDDDD; box-shadow: 1px 2px 1px #AAAAAA; border-radius: 15px; display:none; overflow: auto; overflow-x:hidden;">
										<div align="right">
											<b onclick="javascript:hideAll()" style="cursor: pointer">[X]</b>
										</div>
										<h3>${comp + "   |   " + envsHeader}</h3>
										 <table style="width=100%" class="table table-bordered table-striped table-condensed">
											<tbody>
												<th style="width: 8%;text-align:center">Build</th>
												<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
													<th style="text-align:center">Package</th>
												</j:if>
												<j:forEach items="${customColumnsList}" var="column">
													<j:if test="${compLastDeployed.get(column.toLowerCase()) != null}">
														<th style="text-align:center">${column.substring(0, 1).toUpperCase() + column.substring(1)}</th>
													</j:if>
												</j:forEach>
												<th style="width:8%;text-align:center">Action</th>
												<th style="width:8%;text-align:center">Status</th>
												<th style="text-align:center">Time</th>
											</tbody>
											
											<j:forEach items="${it.getDeploymentsByCompEnv(comp, envsHeader, limitDeploy)}" var="deployment">
													<tr>
														<td >
															<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get('buildNum')}</a>
														</td>
														<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
															<td style="word-wrap:break-word">
																${deployment.get('packageName')}
															</td>
														</j:if>
														<j:forEach items="${customColumnsList}" var="column">
															<j:if test="${compLastDeployed.get(column.toLowerCase()) != null}">
																<td style="max-width:20em;word-wrap:break-word">
																	${deployment.get(column.toLowerCase())}
																</td>
															</j:if>
														</j:forEach>
														<td>
														  <code>
															
																<j:if test="${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1] != null}">
	 
																   <j:if test="${comp.indexOf('Backend') == -1}">
																		<j:switch on="${deployment.get('buildstatus')}">
																			<j:case value="SUCCESS">
																				<j:choose>
																					<j:when test="${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)] == 'Last Commit'}">
																						<a title="Promote" href="javascript:showClientDepDynamicDialog('${comp}',null,'${deployment.get('buildNum')}');">Promote</a>
																					</j:when>
																					<j:otherwise>
																						<a title="Promote" href="javascript:showClientDepDynamicDialog('${comp}','${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1]}','${deployment.get('buildNum')}');">Promote</a>
																					</j:otherwise>
																				</j:choose>
																			</j:case>
																			<j:case value="FAILURE">
																				 <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:case>
																			<j:case value="RUNNING">
																				 <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:case>
																			<j:default>																	
																				  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:default>
																		</j:switch>
																	</j:if>	
																	<j:if test="${comp.indexOf('Backend') != -1}">
																	
																			<j:switch on="${deployment.get('buildstatus')}">
																			<j:case value="SUCCESS">
																				 <a title="Promote" href="javascript:showBackendDepDynamicDialog('${comp}','${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1]}','${deployment.get('buildNum')}');">Promote</a>
																			</j:case>
																			<j:default>																
																				  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:default>
																		</j:switch>
																		
																	</j:if> 
																	
																</j:if> 
															 
														 </code>
														</td>
														<td>
															<j:switch on="${deployment.get('buildstatus')}">
																<j:case value="SUCCESS">
																	<span title="SUCCESS" style="color:green;">&#10004;</span>
																</j:case>
																<j:case value="FAILURE">
																	<span title="FAILURE" style="color:darkred;">&#x2716;</span>
																</j:case>
																<j:case value="RUNNING">
																	<span title="RUNNING" style="color:blue;">&#9658;</span>
																</j:case>
																<j:default>
																	<span title="UNKNOWN" style="color:orange;">&#63;</span>
																</j:default>
															</j:switch>
														</td>
														<td>
															<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(deployment.get('created_at'))}</a>
														</td>
													</tr>
											</j:forEach>	  
										</table>
									</div>
								</j:forEach>


								<!-- Component History -->
								<j:forEach items="${orderOfComps}" var="comp">
									<j:set var="compLastDeployed" value="${it.getCompLastDeployed(envsHeader, comp)}"/>
									<div id="${comp}_History" style="display: inline-block; position: fixed; top: 100; bottom: 100; left: 0; right: 0; width: 900px; height: 600px; position:fixed; margin: auto; padding: 10px; background-color: #FEFEFE; border: 1px solid; border-color: #DDDDDD; box-shadow: 1px 2px 1px #AAAAAA; border-radius: 15px; display:none; overflow: auto; overflow-x:hidden;">
										<div align="right">
											<b onclick="javascript:hideAll()" style="cursor: pointer">[X]</b>
										</div>
										<h3>${comp} History</h3>
										 <table class="table table-bordered table-striped table-condensed">
											<tbody>
												<th style="text-align:center">Env</th>
												<th style="text-align:center">Build</th>
												<th style="text-align:center">Status</th>
												<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
													<th style="text-align:center">Package</th>
												</j:if>
												<th style="text-align:center">Time</th>
											</tbody>
											
											<j:forEach items="${it.getDeploymentsByComp(comp, limitDeploy)}" var="deployment">
												<tr>
													<td>
														${deployment.get('envName')}
													</td>
													<td>
														<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get('buildNum')}</a>
													</td>
													<td>
														<j:switch on="${deployment.get('buildstatus')}">
															<j:case value="SUCCESS">
																<span title="SUCCESS" style="color:green;">&#10004;</span>
															</j:case>
															<j:case value="FAILURE">
																<span title="FAILURE" style="color:darkred;">&#x2716;</span>
															</j:case>
															<j:case value="RUNNING">
																<span title="RUNNING" style="color:blue;">&#9658;</span>
															</j:case>
															<j:default>
																<span title="UNKNOWN" style="color:orange;">&#63;</span>
															</j:default>
														</j:switch>
													</td>
													<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
														<td>
															${deployment.get('packageName')}
														</td>
													</j:if>
													<td>
														<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(deployment.get('created_at'))}</a>
													</td>
												</tr>
											</j:forEach>	  
										</table>
									</div>
								</j:forEach>
							</th>
						</j:forEach>
					</tr>


					<!-- Main dashboard -->
					<j:forEach items="${orderOfComps}" var="comps">
						<tr>
							<td align="center"><strong><a href="javascript:toggle('${comps}_History')">${comps}</a></strong></td>
							<j:forEach items="${orderOfEnvs}" var="env">
								<j:set var="deployment" value="${it.getCompLastDeployed(env, comps)}"/>
								<j:if test="${!deployment.isEmpty()}">
									<j:switch on="${deployment.get('buildstatus')}">
										<j:case value="SUCCESS">
											<j:set var="bgcol" value="#DAF5DA;"/>
											<j:set var="clss" value="notused"/>
											<j:set var="extn" value=""/>
										</j:case>
										<j:case value="FAILURE">
											<j:set var="bgcol" value="#FF6666;"/>
											<j:set var="clss" value="notused"/>
											<j:set var="extn" value=""/>
										</j:case>
										<j:case value="RUNNING">
											<j:set var="bgcol" value="#ffffff;"/>
											<j:set var="clss" value="deploying"/>
											<j:set var="extn" value="console"/>
										</j:case>
										<j:default>
											<j:set var="bgcol" value="#eccf97;"/>
											<j:set var="clss" value="notused"/>
											<j:set var="extn" value="console"/>
										</j:default>
									</j:switch>
								</j:if>

								<td class="${clss}" style="background-color:${bgcol} padding 1.5% 1.5%;" align="center">
									<j:if test="${!deployment.isEmpty()}">
										<a style="text-decoration:none; color:blue; font-size:medium;" title="View" href="javascript:toggle('${comps}_${env}_Popup');">
											<strong>
												<j:if test="${deployment.get('packageName').equals('') || deployment.get('packageName') == null}">${deployment.get('buildNum')}</j:if>
												<j:if test="${!deployment.get('packageName').equals('') &amp;&amp; deployment.get('packageName') != null}">${deployment.get('packageName')}</j:if>
												<j:switch on="${deployment.get('buildstatus')}">
													<j:case value="SUCCESS">
														<span title="SUCCESS" style="color:green;">&#10004;</span>
													</j:case>
													<j:case value="FAILURE">
														<span title="FAILURE" style="color:darkred;">&#x2716;</span>
													</j:case>
													<j:case value="RUNNING">
														<span title="RUNNING" style="color:blue;">&#9658;</span>
													</j:case>
													<j:default>
														<span title="UNKNOWN" style="color:orange;">&#63;</span>
													</j:default>
												</j:switch>
											</strong>
										</a>
										<div align="right">
											<code>
												<a style="font-size:small; text-decoration:none;" title="View Deployment" href="${deployment.get('jobUrl')}${extn}" target="AnalyticsBuildsDeployments">[${it.getNiceTimeStamp(deployment.get('created_at'))}]</a>
											</code>
										</div>
										<div align="right">
											<code>
												<j:if test="${orderOfEnvs[orderOfEnvs.indexOf(env)+1] != null}">
													<j:if test="${orderOfEnvs.indexOf(env) != 0}">
											
															<j:if test="${comps.indexOf('Backend') == -1}">
															<j:switch on="${deployment.get('buildstatus')}">
																<j:case value="SUCCESS">
																	 <a title="Promote" href="javascript:showClientDepDynamicDialog('${comps}','${orderOfEnvs[orderOfEnvs.indexOf(env)+1]}','${deployment.get('buildNum')}');">Promote${it.envVars}</a>
																</j:case>
																<j:default>																	
																	  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																</j:default>
															 </j:switch>
																
															</j:if>	
															
															<j:if test="${comps.indexOf('Backend') != -1}">  
												
																<j:switch on="${deployment.get('buildstatus')}">
																	<j:case value="SUCCESS">
																		<a title="Promote" href="javascript:showBackendDepDynamicDialog('${comps}','${orderOfEnvs[orderOfEnvs.indexOf(env)+1]}','${deployment.get('buildNum')}');">Promote</a>
																	</j:case>
																	<j:default>																	
																		<a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																	</j:default>
																</j:switch>

																
															</j:if> 
														 
													</j:if> 
												</j:if>
											</code>
										</div>
									</j:if>
									<j:if test="${orderOfEnvs.indexOf(env) == 0}">
										
										<j:forEach items="${orderOfEnvs}" var="env_promote">


											<!-- don't promote to itself -->
											<j:if test="${env_promote != env}">
											
												
												
												   <!-- DROPDOWN MENUS FOR PERFORMING BACKEND DEPLOYMENTS under 'Last Commit' column-->
												   
													<j:if test="${comps.indexOf('Backend') != -1}">  
													<j:set var="tags" value="${it.getOrderOfTags(comps,env_promote)}"/>
													
														 <j:set var="SpaceIndex" value="${comps.indexOf(' ',1)}"/>
														 <j:set var="client" value="${comps.substring(0,SpaceIndex)}"/>
														 <j:set var="lastcommit" value="${it.getCompLastDeployed('Last Commit', client)}"/>
													 
															
														<div class="dropdown" style="float:right;">
																<button class="dropbtn" >Deploy to ${env_promote}...</button>
														  <div id="myDropdown${env_promote}" class="dropdown-content">
															<code>
																<j:forEach items="${tags}" var="tag">
																	<j:if test="${env_promote == 'DEV'}">
																		<j:if test="${lastcommit.get('buildstatus') != 'SUCCESS'}">
																			<a href="javascript:void(0)" class="disabled">${tag}</a>
																		</j:if>
																	</j:if>
																	<j:if test="${env_promote != 'DEV' || lastcommit.get('buildstatus') == 'SUCCESS'}">
																		<a href="javascript:showBackendDepDynamicDialog('${comps}','${env_promote}', '${tag}');">${tag}</a>
																	</j:if>
																</j:forEach>
															</code>
														  </div>
														</div>
													</j:if>
													
													<!-- PROMOTE LINKS under 'Last Commit' column -->
													<j:if test="${comps.indexOf('Backend') == -1}"> 
														<div style="margin-right:30px; float:right;">
															<j:switch on="${deployment.get('buildstatus')}">
																<j:case value="SUCCESS">
																	  <a href="javascript:javascript:showClientDepDynamicDialog('${comps}','${env_promote}','${deployment.get('buildNum')}');">Promote to ${env_promote}</a>
																</j:case>
																<j:default>																	
																	  <a href="javascript:void(0)" class="disabled">Promote to ${env_promote}</a>												
																</j:default>
															</j:switch>
														</div>	
														
													  											
													</j:if>
												
											</j:if>
										</j:forEach>
									</j:if>
								</td>
							</j:forEach>
						</tr>
					</j:forEach>

					<script language="javascript">
											
						var validationObj;
						var validationObj2;
						var refreshIntervalId;
						var prevBuildForFoundSHA;
						var typeofDeployment;
						var CRjob;
						var CRjobstepActionType;
						
						//Create a proxy for EnvDashView Java object on a server side so it can later be used during AJAX calls
						var EnvDashViewProxy;
						
						var authorizedForPRDactions = "TBD";
						
						//Hide the dynamic dialog initially after the page loads					
						Q(document).ready(function(){
						
							EnvDashViewProxy = <st:bind value="${it}"/>;
							
							//Make dummy calls to server side using proxy so 404 error can be avoided
							var response5;
							var date2;
							setInterval(function() {
								EnvDashViewProxy.maintainConnectivityToProxy(function(t) {
									 response5 = t.responseObject();
									 if (response5.indexOf("failed") == -1)
									 {
										//parsing succeeded
										//Q("#dialog3").dialog("option","title","Success");
										//Q("#dialog3text").text(response5);
										//Q("#dialog3").dialog("open");
										//date2 = new Date().toLocaleString();
										//console.log(date2);
									 
									 }
									 else
									 {
									 
										//Q("#dialog3").dialog("option","title","Failure");
										//Q("#dialog3text").text(response5);
										//Q("#dialog3").dialog("open");
									 
									 }
									 
								});
							}, 300 * 1000); // 5 minutes
							
							
													
						
							Q("#overlay, #dialog, #dialog2, #ClientRevisionSection, #non-dev-env, #PRDsection, #prd-env, #njstartstepSection, #envSection, #prd-env-cr-job").hide();
							Q("#dialog").draggable();
							
							Q("#dialog3").dialog({
								autoOpen: false, 
								modal: true,
								draggable: true,
								dialogClass: "titlebar"
							});
							
							
							//Q("#dialog3").dialog("option","title","Debug");
							//Q("#dialog3text").text(EnvDashViewProxy);
							//Q("#dialog3").dialog("open");
							
							
							Q("#dialog2").dialog({
								autoOpen: false, 
								modal: true,
								draggable: true,
								resizable: false,
								autoResize: true,
								width: 1000,
								//height: 600,
								dialogClass: "no-close",
								buttons: {
								OK: function (e) {
										//Q(this).submit();
										// Stop form from submitting normally
										e.preventDefault();
										
										//Save CR job step
										//alert(Q("#SQLscript").val());
										//alert(Q("#activeServer").val());
										
										
										//Loop through CRjob steps and find the max step_id
										var step_ids = [];
										var last_step_id;
										
										Q( "#CRjobstepsTable td" ).each(function( index ) {

										  if (Q( this ).attr("id") == "step_id") 
										  {
											step_ids.push(Q( this ).text());
										  }
											
										});
										last_step_id = Math.max.apply(Math, step_ids);
										
										
										//Loop through CRjob steps and update all of the steps
										var response4;
										var i = 1;
										var step_id;
										var step_name;
										var subsystem;
										var command;
										var on_success_action;
										
										var CRjobStepsJSONobj = {
												CRjobsteps: []
											};
										var JSONObjToSend;
										
										 Q( "#CRjobstepsTable td" ).each(function( index ) {
										 
										 
											 //var Qtd = Q(this);
											 //Qth = Qtd.closest('tbody').find('th').eq(Qtd.index());
											 //console.log(Qth.text());
											 
											 //var Qtd = Q(this);
											 //var tdIndex = Qtd.index() + 1;
											 //var Qth = Q('#CRjobstepsTable tr').find('th:nth-child(' + tdIndex + ')');
											 //console.log(Qth.text());
											 
											 

											//console.log('Processing row number ' + i);
											//console.log( index + ": " + Q( this ).attr("id") );
											//console.log( index + ": " + Q( this ).text() );
											//alert( index + ": " + Q( this ).text() );
										 
											  
											  
											  if (Q( this ).attr("id") == "step_id") 
											  {
												step_id = Q( this ).text();
												command = Q('.' + Q( this ).text() + "_for_command_retrieval").text();
												
												if (step_id == last_step_id)
												{
													on_success_action = 1;
												}
												else
												{
													on_success_action = 3;
												}
												
											  }
											  else if (Q( this ).attr("id") == "step_name") 
											  {
												step_name = Q( this ).text();
											  }
											  else if (Q( this ).attr("id") == "subsystem") 
											  {
												subsystem = Q( this ).text();
											  }
											  else if (Q( this ).attr("id") == "radioButton")  
											  {
												
												response4 = "";
												
												//alert("about to pass the following values for row number " + i);
												//alert(Q("#activeServer").val());
												//alert(CRjob);
												//alert(step_id);
												//alert(step_name);
												//alert(subsystem);
												//alert(command);
												
												CRjobStepsJSONobj.CRjobsteps.push({ 
													"job_name" : CRjob,
													"step_name" : step_name,
													"subsystem" : subsystem,
													"command" : command,
													"on_success_action" : on_success_action
													
												});
												
												i = i + 1;
											  }
											  
										});
												
										
										//alert(CRjobStepsJSONobj);

										 EnvDashViewProxy.AddCRjobSteps(Q("#activeServer").val(),CRjob,CRjobStepsJSONobj,function(t) {
											 response4 = t.responseObject();
											 if (response4.indexOf("failed") == -1)
											 {
												//Processing CRjob steps succeeded
												Q("#dialog3").dialog("option","title","Success");
												Q("#dialog3text").text(response4);
												Q("#dialog3").dialog("open");
											 
											 }
											 else
											 {
											 
												Q("#dialog3").dialog("option","title","Failure");
												Q("#dialog3text").text(response4);
												Q("#dialog3").dialog("open");
											 
											 }
											 
										});
												
										
										Q("#dialog2").dialog("close");
												
					
										
									},
									Cancel: function () {
										Q(this).trigger("reset");
										Q(this).dialog("close");
									}
								}
							}).prev(".ui-dialog-titlebar").css("background","#81BEF7");
							
							
							
														
							Q.validator.addMethod("dateTime", function(value, element) {
								var futureDateTime = new Date(value);
								var now = new Date();
								return this.optional(element) || (futureDateTime &gt; now);
							});
							
							
							validationObj = Q("#dialog").validate({ // initialize the plugin
								rules: {
									ClientRevision: {
										required: true,
										minlength: 40,
										maxlength: 40,
										// Using the normalizer to trim the value of the element
										// before validating it.
										//
										// The value of `this` inside the `normalizer` is the corresponding
										// DOMElement. In this example, `this` references the `username` element.
										normalizer: function(value) {
											return Q.trim(value);
										}
									},
									clientBuilds: {
										required: true
									},
									ClientRevisionDecision: {
										required: true
									},
									njstartstep: {
										required: true,
										// Using the normalizer to trim the value of the element
										// before validating it.
										//
										// The value of `this` inside the `normalizer` is the corresponding
										// DOMElement. In this example, `this` references the `username` element.
										normalizer: function(value) {
											return Q.trim(value);
										}
									},
									njStartStepDecision: {
										required: true
									},
									datetimepicker: {
										required: true,
										dateTime: true
									},
								    EnvDecision: {
										required: true
									}
								},
								messages: {
									ClientRevision: {
										required: "client revision is required",
										minlength: "value needs to be 40 characters long",
										maxlength: "value needs to be 40 characters long"
									},
									clientBuilds: "please choose the stable build",
									ClientRevisionDecision: "please make a choice",
									njStartStepDecision: "please make a choice",
									datetimepicker: {
										required: "please schedule this PRD deployment",
										dateTime: "please enter the date into the future"
									},
									njstartstep: "please enter name of the step",
									EnvDecision: "please make a choice"
								},
								errorPlacement: function(error, element) {
									if (element.attr("name") == "clientBuilds" )
										Q("#customErrorPlacement").text(Q(error).text());
									else
									{
										error.insertAfter(element);	
									}
								}
							});
							
							
							validationObj2 = Q("#dialog4").validate({ // initialize the plugin
								/*
							    submitHandler: function(form) {
									doAjaxPost();
								},*/
								rules: {
									stepname: {
										required: true,
										normalizer: function(value) {
											return Q.trim(value);
										}
									},
									SQLscript: {
										required: true
									}
								},
								messages: {
									stepname: "step name is required",
									SQLscript: "command is required"
								},
								errorPlacement: function(error, element) {
										error.insertAfter(element);	
								}
							});
							
							
							
							Q("#dialog4").dialog({
								autoOpen: false, 
								modal: true,
								draggable: true,
								resizable: false,
								autoResize: true,
								width: 1000,
								//height: 600,
								dialogClass: "no-close",
								buttons: {
									OK: function (e) {
										//Q(this).submit();
										if(!validationObj2.form())
										{  
										  e.preventDefault(); 
										}
										else
										{
											// Stop form from submitting normally
											e.preventDefault();
											
										    //store the changes temporarily;
											if (CRjobstepActionType == "edit")
											{
												Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_step_name_retrieval").text(Q("#stepname").val());
												Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_command_retrieval").text(Q("#SQLscript").val());
												Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_short_command_retrieval").text(Q("#SQLscript").val().substring(0, 14));
												Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_subsystem_retrieval").text("TSQL");
											}
											else if (CRjobstepActionType == "new")
											{
												
												//Loop through CRjob steps and find the max step_id
												var step_ids = [];
												var next_step_id;
												var last_step_id;
												
												var empty = true;
												Q( "#CRjobstepsTable td" ).each(function( index ) {

												  if (Q( this ).attr("id") == "step_id") 
												  {
													empty = false;
													step_ids.push(Q( this ).text());
												  }
													
												});
												
												if (empty)
												{
													next_step_id = 1;
												}
												else
												{
													last_step_id = Math.max.apply(Math, step_ids);
													next_step_id = last_step_id + 1;
													Q('.' + last_step_id + "_for_on_success_action_retrieval").text("goto next step");
												}
												
												
												//console.log(last_step_id);
												//console.log(next_step_id);
												
												
												Q("#CRjobstepsTable tbody").append('<tr>');
												Q("#CRjobstepsTable tbody").append('<td id="step_id" style="width: 8%;text-align:center">' + next_step_id + '</td>');
												Q("#CRjobstepsTable tbody").append('<td id="step_name" style="width: 8%;text-align:center" class="' + next_step_id + '_for_step_name_retrieval">' + Q("#stepname").val() + '</td>');
												Q("#CRjobstepsTable tbody").append('<td id="subsystem" style="width: 8%;text-align:center" class="' + next_step_id + '_for_subsystem_retrieval">' + "TSQL" + '</td>');
												Q("#CRjobstepsTable tbody").append('<td id="command_substring" style="width: 8%;text-align:center" class="' + next_step_id + '_for_short_command_retrieval">' + Q("#SQLscript").val().substring(0, 14) + '...</td>');
												//Q("#CRjobstepsTable tbody").append('<td style="width: 8%;text-align:center;visibility:hidden"><textarea class="' + next_step_id + '_for_command_retrieval">' + element.command + '</textarea></td>');	 
												
												
												Q("#CRjobstepsTable tbody").append('<td id="on_success_action" style="width: 8%;text-align:center" class="' + next_step_id + '_for_on_success_action_retrieval">' + "quit with success" + '</td>');
												Q("#CRjobstepsTable tbody").append('<td id="on_fail_action" style="width: 8%;text-align:center" class="' + next_step_id + '_for_on_fail_action_retrieval">' + "quit with failure" + '</td>');
												Q("#CRjobstepsTable tbody").append('<td id="radioButton" style="width: 8%;text-align:center"><input type="radio" name="CRjobsteps" id="' + next_step_id + '"></input></td>');

												//Q("#CRjobstepsTable tbody").append('<td>EditButton</td>');
												//Q("#CRjobstepsTable tbody").append('<td style="width: 8%;text-align:center"><input type="button" id="edit" value="edit"></input></td>');
												Q("#CRjobstepsTable tbody").append('</tr>');

												Q("#CRjobstepsTable").append('<textarea style="display:none;" class="' + next_step_id + '_for_command_retrieval">' + Q("#SQLscript").val() + '</textarea>');	
																							
											}
											
											Q(this).dialog("close");
					
										}
									},
									Cancel: function () {
										Q(this).trigger("reset");
										validationObj2.resetForm();
										Q(this).dialog("close");
									}
								}
							}).prev(".ui-dialog-titlebar").css("background","#81BEF7");
							
							
							Q("#dialog").submit(function(e){ 
								if(!validationObj.form())
								{  
								  e.preventDefault(); 
								}
								else
								{
									// Stop form from submitting normally
									e.preventDefault();
									
									//calculate seconds so we know when the jenkins build needs to be triggered									
									if(Q("#datetimepicker").val())
									{
										var futureDateTime = new Date(Q("#datetimepicker").val());
										var now = new Date();
										var diff = Math.round((futureDateTime - now)/1000);
										Q("#secondsToWait").val(diff);
									}
									else
									{
										Q("#secondsToWait").val(0);
									}
																		
									
									//alert("client version " + Q("#build_num").val());
									//alert("core version " + Q("#core_version").val());
									//alert("type of deployment is " + typeofDeployment);
									
									//Determine what type of deployment needs to be performed		
									if (Q("#build_num").val().length != 0 &amp;&amp; Q("#core_version").val().length == 0 &amp;&amp; typeofDeployment == "client")
									{
										//Perform client deployment
										startDeployment("client",Q("#clientAcronym").val(),Q("#environment").val(),Q("#build_num").val())
									}
									else if (Q("#core_version").val().length != 0 &amp;&amp; Q("#build_num").val().length == 0 &amp;&amp; typeofDeployment == "backend")
									{
										//Perform backend deployment		
										startDeployment("backend",Q("#clientAcronym").val(),Q("#environment").val(),Q("#core_version").val());
									}
									else
									{
										//alert("something went wrong");
										Q("#dialog3").dialog("option","title","Error");
										Q("#dialog3text").text("something went wrong");
										Q("#dialog3").dialog("open");
									}
								
								}
								
							});
							
							
							Q("#reset").click(function(){
								CloseResetDynamicDialog("reset");
							});
							
							Q("#cancel").click(function(){
								CloseResetDynamicDialog("close");
							});
							
							
							Q("#edit").click(function(){
							
								if (Q("input:radio[name=CRjobsteps]").is(":checked"))
								{
									CRjobstepActionType = "edit";
									var id = Q("input[name=CRjobsteps]").filter(":checked").prop('id');
									
									Q("#stepname").val(Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_step_name_retrieval").text());
									Q("#SQLscript").val(Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_command_retrieval").text());
									
									Q("#dialog4").dialog("option","title",Q('.' + Q("input[name=CRjobsteps]").filter(":checked").prop('id') + "_for_step_name_retrieval").text());
									
									Q("#dialog4").dialog("open");
								}
								else
								{
								
									Q("#dialog3").dialog("option","title","Failure");
									Q("#dialog3text").text("Please choose the step to edit first.");
									Q("#dialog3").dialog("open");
								
								}
								
							});
							
							
							
							Q("#delete").click(function(){
							
								if (Q("input:radio[name=CRjobsteps]").is(":checked"))
								{
									CRjobstepActionType = "delete";
									var id = Q("input[name=CRjobsteps]").filter(":checked").prop('id');
									
									//console.log(id);

									var step_id;
									Q( "#CRjobstepsTable td" ).each(function( index ) {

										  if (Q( this ).attr("id") == "step_id") 
										  {
											step_id = Q( this ).text();
											
											if (step_id == id)
											{
												Q( this ).remove();
												Q('.' + Q( this ).text() + "_for_command_retrieval").remove();
												
											}

											
										  }
										  else if (Q( this ).attr("id") == "step_name") 
										  {
											if (step_id == id)
											{
												Q( this ).remove();
											}
										  }
										  else if (Q( this ).attr("id") == "subsystem") 
										  {
											if (step_id == id)
											{
												Q( this ).remove();
											}
										  }
										  else if (Q( this ).attr("id") == "command_substring") 
										  {
											if (step_id == id)
											{
												Q( this ).remove();
											}
										  }
										  else if (Q( this ).attr("id") == "on_success_action") 
										  {
											if (step_id == id)
											{
												Q( this ).remove();
											}
										  }
										  else if (Q( this ).attr("id") == "on_fail_action") 
										  {
											if (step_id == id)
											{
												Q( this ).remove();
											}
										  }
										  else if (Q( this ).attr("id") == "radioButton")  
										  {

											if (step_id == id)
											{
												Q( this ).remove();
											}
										  }
									});
									
									
									//Re-sequence
									var i = 1;
									Q( "#CRjobstepsTable td" ).each(function( index ) {

										  if (Q( this ).attr("id") == "step_id") 
										  {
											Q( this ).text(i);
										  }
										  else if (Q( this ).attr("id") == "step_name") 
										  {
											Q( this ).attr("class", i + "_for_step_name_retrieval");
										  }
										  else if (Q( this ).attr("id") == "subsystem") 
										  {
											Q( this ).attr("class", i + "_for_subsystem_retrieval");
										  }
										  else if (Q( this ).attr("id") == "command_substring") 
										  {
											Q( this ).attr("class", i + "_for_short_command_retrieval");
										  }
										  else if (Q( this ).attr("id") == "on_success_action") 
										  {
											Q( this ).attr("class", i + "_for_on_success_action_retrieval");
										  }
										  else if (Q( this ).attr("id") == "on_fail_action") 
										  {
											Q( this ).attr("class", i + "_for_on_fail_action_retrieval");
										  }
										  else if (Q( this ).attr("id") == "radioButton")  
										  {
											
											i = i + 1;
										  }
										  
									});

									i = 1;
									Q( "#CRjobstepsTable input[type=radio]" ).each(function( index ) {

										Q( this ).attr("id", i);
										i = i + 1;
										 
									});

									i = 1;
									Q( "#CRjobstepsTable textarea" ).each(function( index ) {

										Q( this ).attr("class", i + "_for_command_retrieval");
										i = i + 1;
										 
									});
									
									
									//Loop through CRjob steps and find the max step_id
									var step_ids = [];
									var last_step_id;

									Q( "#CRjobstepsTable td" ).each(function( index ) {

									  if (Q( this ).attr("id") == "step_id") 
									  {
										step_ids.push(Q( this ).text());
									  }
										
									});
									last_step_id = Math.max.apply(Math, step_ids);
									
									//console.log(last_step_id);
									i = 1;
									Q( "#CRjobstepsTable td" ).each(function( index ) {

									  if (Q( this ).attr("id") == "step_id") 
									  {
										step_id = Q( this ).text();
										//console.log(step_id);
										
									  }
									  else if (Q( this ).attr("id") == "on_success_action") 
									  {

										//console.log('before setting the success action..');
										//console.log(last_step_id);
										//console.log(step_id);
										
										if (step_id == last_step_id)
										{
											Q( this ).text("quit with success");
										}
										else
										{
											Q( this ).text("goto next step");
										}
									  }
									  else if (Q( this ).attr("id") == "radioButton")  
									  {
										
										i = i + 1;
									  }
										  
									});

									
								}
								else
								{
								
									Q("#dialog3").dialog("option","title","Failure");
									Q("#dialog3text").text("Please choose the step to delete first.");
									Q("#dialog3").dialog("open");
								
								}
								
							});
							
							
							Q("#new").click(function(){
								
								CRjobstepActionType = "new";
								Q("#stepname").val("");
								Q("#SQLscript").val("");
								Q("#dialog4").dialog("open");
							});

							
							
							Q("#parse").click(function(){
								
								//alert(Q("#SQLscript").val());
								//alert(Q("#activeServer").val());
								
								
								//Connecting directly to SQL server by passing SQL query to parse
								var response3 = "";
								EnvDashViewProxy.parseSQLquery(Q("#SQLscript").val(),Q("#activeServer").val(),function(t) {
									 response3 = t.responseObject();
									 if (response3.indexOf("failed") == -1)
									 {
										//parsing succeeded
									 	Q("#dialog3").dialog("option","title","Success");
										Q("#dialog3text").text(response3);
										Q("#dialog3").dialog("open");
									 
									 }
									 else
									 {
									 
									 	Q("#dialog3").dialog("option","title","Failure");
										Q("#dialog3text").text(response3);
										Q("#dialog3").dialog("open");
									 
									 }
									 
								});
								
								
								
							});
							
							
							
							
							Q("#properties").click(function(){
								
								
								
								
								//alert("properties button was clicked");
								//Q("#dialog3").dialog("option","title","Debug");
								//Q("#dialog3text").text("properties button was clicked");
								//Q("#dialog3").dialog("open");
								
								//Retrieve CR job steps
								var response2 = "";
								EnvDashViewProxy.getCRjobStepsSQLquery(CRjob,Q("#clientAcronym").val(),Q("#environment").val(), function(t) {
									 response2 = t.responseObject();
									 
									
									 if (response2.indexOf("failed") == -1)
									 {
										/*
										Q("#dialog3").dialog("option","title","Debug");
										Q("#dialog3text").text(response2);
										Q("#dialog3").dialog("open");
										*/
										
										 var stepsjobject = JSON.parse(response2);
										 //alert(stepsjobject);
										 
										 
										 //alert(response2);
										 //alert("About to populate the table...");
										 
										 //Initialize
										 Q("#CRjobinfoTable td").remove();
										 Q("#CRjobstepsTable td").remove();
										 Q("#CRjobstepsTable textarea").remove();
										 
										 Q.each(stepsjobject.info, function(index, element){
											//alert(element.start_step_id); 
											//alert(element.date_modified); 
											//alert(element.last_run_date); 
											//alert(element.last_run_time); 
											//alert(element.last_run_outcome); 
											//alert(element.current_execution_status); 
											//alert(element.current_execution_step); 
											
											 Q("#CRjobinfoTable tbody").append('<tr>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.start_step_id + '</td>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.date_modified + '</td>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.last_run_date + '</td>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.last_run_time + '</td>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.last_run_outcome + '</td>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.current_execution_status + '</td>');
											 Q("#CRjobinfoTable tbody").append('<td style="width: 8%;text-align:center">' + element.current_execution_step + '</td>');
											 Q("#CRjobinfoTable tbody").append('</tr>');
											 
											 Q("#activeDB").val(element.activeDB);
											 Q("#activeServer").val(element.activeServer);
											 
											 
										 });
										 
										 Q.each(stepsjobject.steps, function(index, element){
											//alert(element.step_id); 
											//alert(element.step_name); 
											//alert(element.on_fail_action); 
											
											 Q("#CRjobstepsTable tbody").append('<tr>');
											 Q("#CRjobstepsTable tbody").append('<td id="step_id" style="width: 8%;text-align:center">' + element.step_id + '</td>');
											 Q("#CRjobstepsTable tbody").append('<td id="step_name" style="width: 8%;text-align:center" class="' + element.step_id + '_for_step_name_retrieval">' + element.step_name + '</td>');
											 Q("#CRjobstepsTable tbody").append('<td id="subsystem" style="width: 8%;text-align:center" class="' + element.step_id + '_for_subsystem_retrieval">' + element.subsystem + '</td>');
											 Q("#CRjobstepsTable tbody").append('<td id="command_substring" style="width: 8%;text-align:center" class="' + element.step_id + '_for_short_command_retrieval">' + element.command.substring(0, 14) + '...</td>');
											 //Q("#CRjobstepsTable tbody").append('<td style="width: 8%;text-align:center;visibility:hidden"><textarea class="' + element.step_id + '_for_command_retrieval">' + element.command + '</textarea></td>');	 
											 Q("#CRjobstepsTable tbody").append('<td id="on_success_action" style="width: 8%;text-align:center" class="' + element.step_id + '_for_on_success_action_retrieval">' + element.on_success_action + '</td>');
											 Q("#CRjobstepsTable tbody").append('<td id="on_fail_action" style="width: 8%;text-align:center" class="' + element.step_id + '_for_on_fail_action_retrieval">' + element.on_fail_action + '</td>');
											 Q("#CRjobstepsTable tbody").append('<td id="radioButton" style="width: 8%;text-align:center"><input type="radio" name="CRjobsteps" id="' + element.step_id + '"></input></td>');
											 
											 //Q("#CRjobstepsTable tbody").append('<td>EditButton</td>');
											 //Q("#CRjobstepsTable tbody").append('<td style="width: 8%;text-align:center"><input type="button" id="edit" value="edit"></input></td>');
											 Q("#CRjobstepsTable tbody").append('</tr>');
											 
											 Q("#CRjobstepsTable").append('<textarea style="display:none;" class="' + element.step_id + '_for_command_retrieval">' + element.command + '</textarea>');	 
											 
										 });
										 
										 
										 

										 
										//alert("Finished populating the table");
										 
										 //Present CR job details
										 Q("#dialog2").dialog("open");
										 //Q("#CRjobsteps").show();
										 Q("#CRjobinfoTable, #CRjobstepsTable").show();
										
										
									 }
									 else
									 {
										Q("#dialog3").dialog("option","title","Error");
										Q("#dialog3text").text(response2);
										Q("#dialog3").dialog("open");
									 }
									 
									 
								});
								
							});
							
							
							Q("#ClientRevisionDecision").change(CheckClientRevisionDecision);
							Q("#EnvDecision").change(CheckEnvDecision);
							
							
							Q("#startcrjob").change(function(){
								if(this.checked) 
								{
									Q("#prd-env-cr-job").show();
								}
								else
								{
									Q("#prd-env-cr-job").hide();
								}
								
							});
							
							
							Q("#startnj").change(function(){
								if(this.checked) 
								{
									Q("#prd-env").show();
								}
								else
								{
									Q("#prd-env, #njstartstepSection").hide();
								}
								
							});
							
							Q("#njStartStepDecision").change(ChecknjStartStepDecision);
							
							
							Q("#datetimepicker").datetimepicker({
							    lang: 'en-US',
								format: 'm/d/Y H:i T',
								step: 30
							});
							
							//Pre-populate the NJ steps
							var availableNJsteps = [
								"Check if Previous Job Failed on Cut off Check",
								"Set Currently Processing To One",
								"Auto Reprocess",
								"Staging Load With SSIS",
								"Send Mail on SSIS Staging Load Failure",
								"Informatica Load",
								"Send Mail on Informatica Failure",
								"Update Staging DB Stats",
								"Patient Scrub",
								"Patient Load",
								"Scrub",
								"DW Plan Load",
								"Load SSIS Plan Cache",
								"Load Plan_Claim_Header",
								"Load Plan_Claim_Line",
								"Load Plan_Claim_Diagnosis",
								"DW Plan 2 Load",
								"Delete Inactive Patients",
								"MPI",
								"Update Patient Freeze/Destroy Indicator",
								"Destroy Patient/Clinical Information",
								"Load SSIS Clinical Cache",
								"Load Encounter",
								"Drop indexed view indexes",
								"DW Clinical Load",
								"DW Provider Organization Hierarchy Load",
								"Load MedicationList",
								"Load Prescription",
								"Load Order",
								"Load Result",
								"Load Maintenance",
								"Load Charge",
								"Load ProgressNote",
								"Load UnstructuredText",
								"Post Load Updates",
								"Load RAPS File",
								"Check Cutoff Time",
								"Populate Top Plan Claim Line",
								"Load plan_member_month",
								"Load Person Demographic",
								"Populate Provider Person",
								"Populate MedRx, MedDispense, RXCUI tables",
								"Recreate indexes for indexed views",
								"Populate POS Location Table",
								"Delete Events",
								"Update PersonID In Events",
								"Update PersonID In RAPSDetail",
								"Update Location In Events",
								"Update Provider In Events",
								"Load Event",
								"Load EdEvent table",
								"Populate Attribution",
								"Populate Fills Report",
								"Populate Medical Expense",
								"Populate Dx Hierarchy",
								"Update Common Report Fields",
								"Populate Complete Member Product",
								"Risk Score Calculation And Common Report Fields Post Update",
								"Populate Interaction and Appointment Sorted",
								"Populate Comorbidity",
								"Immunizations Details",
								"Populate Care Gaps",
								"Populate PersonLastPCPVisit",
								"Populate PersonNextPCPAppointment",
								"Cost Management Fact",
								"Admission Events",
								"Update Provider/Location in ImmDetails",
								"Calculate Measure Enrollment",
								"Update Warehouse DB Stats and create periods",
								"Measure Processing",
								"Populate MeasureSubjectCombined",
								"Geocode",
								"Remove Deleted Patients From Measures",
								"Populate Pre Visit Data",
								"Populate Member Roster",
								"Trigger to Populate System Lists",
								"Run System List Procedure",
								"Set Currently Processing To Zero and Update Measure Stats",
								"Update Stats Web DB",
								"Maintenance Timing Errors",
								"StartClientBackupJob",
								"Report job errors"
							];
							
							Q("#njstartstep").autocomplete({
							  source: availableNJsteps,
							  minLength: 0
							});
							
							
							Q("#njstartstep").focus(function (){
								Q("#njstartstep").autocomplete( "search", "" );
							});

							
							Q("input[name=clientBuilds]").change(function(){
								
								if(prevBuildForFoundSHA)
								{
									Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").html('TBD');
								}
								
								if(refreshIntervalId)
								{
									clearInterval(refreshIntervalId);
									Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").css('visibility', 'visible');
								}
								
								prevBuildForFoundSHA = Q("input[name=clientBuilds]").filter(":checked").prop('id');
								
								
								Q("#customErrorPlacement").text("")
								
								var clientBuildXML = "/" + Q("input[name=clientBuilds]").filter(":checked").val() + "api/xml?xpath=/freeStyleBuild/action/lastBuiltRevision/SHA1";
								
								//alert(clientBuildXML);
								
								
								Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html('searching for SHA value...');
								
								//start blinking indicating the search is happening								
								var flashSearch = Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement");
								refreshIntervalId = setInterval(function(){
									if (flashSearch.css('visibility') == 'hidden') 
									{
										flashSearch.css('visibility', 'visible');
									}
									else 
									{
										flashSearch.css('visibility', 'hidden');
									}    
								}, 500);
								
								
								//Get the corresponding SHA value for client build
								Q.get(clientBuildXML, updateTable)
									//.done(success)
									.fail(failure);
									//.always(always);
								
								
							});
							
							
							
							Q("#showHideCBS").click(function(){
								
								
								if (Q('#' + Q("#clientAcronym").val() + "_clientVersions").is(":hidden"))
								{
									Q('#' + Q("#clientAcronym").val() + "_clientVersions").show(500);
								}
								else
								{
									Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide(500);
								}
									
							});
							
							
							//Check if user is authorized to initiate PRD deployments or update PRD CR jobs
							var response = "";
							EnvDashViewProxy.checkIfUserIsInJenkinsPRDgroup(function(t) {
								 response = t.responseObject();
								 
								 if (response.indexOf("failed") == -1)
								 {
									authorizedForPRDactions = response;
									//alert(authorizedForPRDactions);
									
									/*
									Q("#dialog3").dialog("option","title","Debug");
									Q("#dialog3text").text(authorizedForPRDactions);
									Q("#dialog3").dialog("open");
									*/
								 }
								 else
								 {
									//alert(response);
									Q("#dialog3").dialog("option","title","Error");
									Q("#dialog3text").text(response);
									Q("#dialog3").dialog("open");
								 }
							});
							
							
						});
					
						
						function CloseResetDynamicDialog(typeOfAction)
						{
						
							//Reset values and selections of html elements
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html('TBD');
							Q("#dialog").trigger("reset");
							validationObj.resetForm();
							
							if (typeOfAction == "close")
							{
								Q("#overlay, #dialog, #ClientRevisionSection, #non-dev-env, #PRDsection, #prd-env, #njstartstepSection, #envSection, #prd-env-cr-job").hide();
								Q("#buildNumber").val("");
								Q("#core_version").val("");
								Q("#build_num").val("");
							}
							else
							{
								Q("#ClientRevisionSection, #njstartstepSection, #prd-env, #prd-env-cr-job").hide();
								
								if (typeofDeployment == "backend")
								{
									Q("#buildNumber").val("");
									Q("#build_num").val("");
								
								}
								else
								{
									Q("#core_version").val("");
								}
								
							}
							
							Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide();
							Q("#customErrorPlacement").text("");
							Q("#ClientRevision").val("");
							
						
							if(prevBuildForFoundSHA)
							{
								Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").html('TBD');
							}
							
							if(refreshIntervalId)
							{
								clearInterval(refreshIntervalId);
								Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").css('visibility', 'visible');
							}
						
						}
					
						/*
						function success(msg)
						{
							alert("You May Pass!" + msg); 
						}
						*/
						
						
						function success2(msg)
						{
							alert("You May Pass!" + msg); 
						}
						
						
						function failure(jqXHR, textStatus, error)
						{ 
							//alert("You May not Pass!" + textStatus); 
							//alert("You May not Pass!" + error); 
							
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html(error);
							
							
							//stop blinking
							clearInterval(refreshIntervalId);
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").css('visibility', 'visible');
						}
						
						function failure2(jqXHR, textStatus, error)
						{ 
							alert("You May not Pass!" + textStatus); 
							alert("You May not Pass!" + error); 
							
						}
						
						/*
						function always()
						{ 
							alert("Questions Answered."); 
						}
						*/
						
						
						function always2()
						{ 
							alert("Questions Answered."); 
						}
						
					
						function updateTable(data)
						{
							//alert("Inside updateTable function");
							//Retrieve SHA value for client build
							var sha = Q(data).find("SHA1").text();
							Q("#ClientRevision").val(sha);
							Q("#buildNumber").val(Q("input[name=clientBuilds]").filter(":checked").prop('id'));
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html(sha);
							
							
							//stop blinking
							clearInterval(refreshIntervalId);
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").css('visibility', 'visible');
							Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide(500);
						
						}
					
						function processSuccess(data)
						{
							alert("Inside processSuccess function");
							alert(data);
						
						}
						
						function showBackendDepDynamicDialog(comp, env, coreVersion) 
						{
							if (authorizedForPRDactions != "TBD")
							{
								var proceed = false;
								if (authorizedForPRDactions == "authorized" &amp;&amp; env == "PRD")
								{
									proceed = true;
								}								
								else if (authorizedForPRDactions == "unauthorized" &amp;&amp; env == "PRD")
								{
									//alert('You are not authorized to access client PRD environments')
									Q("#dialog3").dialog("option","title","Warning");
									Q("#dialog3text").text("You are not authorized to access client PRD environments");
									Q("#dialog3").dialog("open");
								
								}
								else
								{
									proceed = true;
								}
								
								
								if (proceed)
								{
									//alert( "You are running jQuery version: " + Q.fn.jquery );
									//alert(Q().jquery); //it is 1.7.2
									
									typeofDeployment = "backend";
									
									 Q("#overlay, #dialog").show();
									 
									 if (env != "DEV")
									 {
										Q("#non-dev-env").show();
										
										if (env == "PRD" &amp;&amp; authorizedForPRDactions == "authorized") 
										{
											Q("#PRDsection").show();
										}

									 }
									
									 //Set the html elements
									 var compSubstr = comp.substring(0, comp.indexOf(' '))
									 Q("#dialogTitle").text("Backend deploy " + compSubstr + " to " + env + " for " + coreVersion);
									 Q("#clientAcronym").val(compSubstr);
									 Q("#environment").val(env);
									 Q("#core_version").val(coreVersion);
									 
									 CRjob = compSubstr + "_Change_Request";
									 Q("#cr-job-dep").text(CRjob);
									 //Q("#dialog2Title").text(CRjob);
									 Q("#dialog2").dialog("option","title",CRjob);
								 }

								 
							 }
							 else
							 {
								//alert('Cannot proceed due to failing to determine the user level of access')
								Q("#dialog3").dialog("option","title","Warning");
								Q("#dialog3text").text("Cannot proceed due to failing to determine user's level of access");
								Q("#dialog3").dialog("open");
								
							 }
						}
						
						function CheckClientRevisionDecision()
						{
							if (Q("#ClientRevisionDecision").val() == "yes")
							{
								Q("#ClientRevisionSection").show(500);
								Q('#' + Q("#clientAcronym").val() + "_clientVersions").show(500);
							}
							else
							{
								Q("#build_num").val("");
								Q("#ClientRevisionSection").hide(500);
								Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide(500);
								Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html('TBD');
								Q("input[name=clientBuilds]").filter(":checked").prop('checked', false);
							}
							
						}
						
						function CheckEnvDecision()
						{
							if (Q("#EnvDecision").val() == "PRD")
							{
								Q("#PRDsection").show(500);
								
							}
							else
							{
								Q("#PRDsection").hide(500);
							}
							
							Q("#environment").val(Q("#EnvDecision").val());
						}
						
						function ChecknjStartStepDecision()
						{
							if (Q("#njStartStepDecision").val() == "yes")
							{
								Q("#njstartstepSection").show(500);
							}
							else
							{
								Q("#njstartstepSection").hide(500);
							}
						}
						
						
						function showClientDepDynamicDialog(comp, env, buildNum) 
						{
						
							typeofDeployment = "client";

							 Q("#overlay, #dialog").show();

							 if (env == null)
							 {
							 
								 Q("#envSection").show();
								 Q("#dialogTitle").text("Deploying " + comp + " for " + buildNum);
								
							 }
							 else
							 {
							 
							 	if (env == "PRD")
								{
									Q("#PRDsection").show();
								}
								 
								 //Set the html elements
								 Q("#dialogTitle").text("Deploying " + comp + " to " + env + " for " + buildNum);
								 Q("#environment").val(env);
								 
							 
							 }
							 
							 
							  Q("#clientAcronym").val(comp);
							  Q("#build_num").val(buildNum);
							 
						
						}
						
						
						
						function startDeployment(type, comp, env, version)
						{
							var xmlHttp = new XMLHttpRequest();
							var baseUrl;
							var windowName = "AnalyticsBuildsDeployments";
							var windowObjectReference = null;
							
							if (type == "client")
							{
								baseUrl = "/job/Client_Deploy";
								
							}
							else
							{
								baseUrl = "/job/Backend_Deploy";
								
							}
							
							var buildUrl = "";							
							var DoNotPerformRollback;
							var StartCRjob;
							var StartNJ;
							var nightly_job_start_step;
							
							//Prepare switches and parameters for passing to Jenkins
							if(Q("#norollback").is(":checked")){DoNotPerformRollback="-no_rollback";}else{DoNotPerformRollback="";}
							if(Q("#startcrjob").is(":checked")){StartCRjob="-start_cr_job";}else{StartCRjob="";}
							if(Q("#startnj").is(":checked")){StartNJ="-start_nightly_job";}else{StartNJ="";}
							if(!Q("#njstartstep").val().trim()){nightly_job_start_step="NA";}else{nightly_job_start_step=Q("#njstartstep").val().trim().replace(/['"]+/g, '');}
							
							
							buildUrl = baseUrl + "/buildWithParameters?" +
										"Client=" + comp + 
										"&amp;Env=" + env + 
										"&amp;NoRollback=" + DoNotPerformRollback +
										"&amp;StartCRjob=" + StartCRjob +
										"&amp;StartNJ=" + StartNJ +
										"&amp;NJstartStep=" + nightly_job_start_step +
										"&amp;JiraTicket=" + Q("#jiraticket").val().trim().replace(/['"]+/g, '') +
										"&amp;delay=" + Number(Q("#secondsToWait").val()) + "sec";
							
							if (type == "client")
							{
								buildUrl = buildUrl + 
										"&amp;SourceBuildID=" + version;
								
							}
							else
							{
								buildUrl = buildUrl +
										"&amp;CoreVersion=" + version +
										"&amp;ClientRevision=" + Q("#ClientRevision").val().trim();
							}
							
							
							//debug the URL
							/*
							var str = buildUrl;
							splitString = str.split("&amp;");
							var parsedBuildUrl = "";

							splitString.forEach(function(item) {
							  parsedBuildUrl += item + '\n';
							});

							alert(parsedBuildUrl);
							*/
							
							
							CloseResetDynamicDialog("close");
							xmlHttp.open("POST", buildUrl, true); // true for asynchronous 
							xmlHttp.send(null);
							
							//Keep the same tab/window for showing the newly initiated deployments
							//alert(window.name);
							
							if (window.name == windowName)
							{
								window.open(baseUrl);
							}
							else
							{
								windowObjectReference = window.open(baseUrl,windowName);
								windowObjectReference.focus();
							}
							
							
							window.location.reload(true);
							
						}
						
						
						
						function reloadPage()
						{
							location.reload(true);
						}

						function filterTable() {
						  var input, filter, table, tr, td, i, hd, htmlElementNode;
						  input = document.getElementById("searchInput");
						  filter = input.value.toUpperCase();
						  table = document.getElementById("envDashboard");
						  tr = table.rows;
						  for (i = 0; i &lt; tr.length; i++) {
						    td = tr[i].getElementsByTagName("td")[0];
						    th = tr[i].getElementsByTagName("th")[0];


						    if (td &amp;&amp; !th) {
						      if (td.innerHTML.toUpperCase().indexOf(filter) &gt; -1) {
						        tr[i].style.display = "";
						      } else {
						        tr[i].style.display = "none";
						      }
						    }       
						  }
						}
						
						
						
						function toggle(showHideDiv) {
							hideAll()
							var ele = document.getElementById(showHideDiv);
							if(ele.style.display == "block") {
								ele.style.display = "none";
							}
							else {
								ele.style.display = "block";
							}
						}

						function hideAll() {
							Q(".overlay, .popup, .dropdown").fadeToggle();
							var divs = document.getElementsByTagName("div");
							var tableDivs = new Array();
							for (var i = 0; i &lt; divs.length; i++) {
								if (divs[i].id.match("_History") != null || divs[i].id.match("_Popup") || divs[i].id.match("pop")) {
									tableDivs.push(divs[i]);
								}
							}

							var envs = tableDivs.length;
							for (i = 0; i &lt; envs; i++) {
								var ele = tableDivs[i];
								if(ele.style.display == "block") {
									ele.style.display = "none";
								}
							}

						}
						
						
						
					</script>
				</j:case>
			</j:switch>
		</tbody>
	</table>
</div>
<div id="overlay" style="display:none;"></div>
<form id="dialog" style="display:none;" autocomplete="off">
	<p id="dialogTitle">Placeholder for Deployment Information</p>

	<label id="jiraticketLabel">Jira Ticket (e.g., ACM-123)</label>	<div class="divider"/><input id="jiraticket" type="text"/><br></br>
	<label id="jiraticketDescriptionLabel">Used for automatic ticket update</label>
	
	<br></br><br></br>
	
	<div id="envSection" style="text-align: left"> 
		<label id="EnvLabelQuestion">Please choose client's environment to deploy to</label><div class="divider"/>
		<select id="EnvDecision" name="EnvDecision">
			<option value="">Choose...</option>
			<option value="DEV">DEV</option>
			<option value="QA">QA</option>
			<option value="UAT">UAT</option>
			<option value="PRD">PRD</option>
		</select>
	</div>
	
	
	<div id="non-dev-env" style="text-align: left"> 
		<label id="ClientRevisionLabelQuestion">Do you want to provide specific client revision with this backend deployment?</label><div class="divider"/>
		<select id="ClientRevisionDecision" name="ClientRevisionDecision">
			<option value="">Choose...</option>
			<option value="no">No</option>
			<option value="yes">Yes</option>
		</select>
	</div>
	
	<div id="ClientRevisionSection">
		<label id="ClientRevisionLabel">Selected client build</label>
		<div class="divider"/><input type="text" id="buildNumber" name="buildNumber" readonly="readonly"/><br></br>
		<label id="ClientRevisionLabel">Selected client revision</label>
		<div class="divider"/><input type="text" id="ClientRevision" name="ClientRevision" readonly="readonly"/><br></br>
		<button type="button" id="showHideCBS">Show/Hide client builds</button><br></br>
		<!-- Show history of last client builds  -->
		<j:forEach items="${orderOfComps}" var="comp">
			<div id="${comp}_clientVersions" style="display: none; height:200px; overflow: auto;">
				<label id="requestforSHA">Please select the stable build (client version) to deploy after core upgrade during backend deployment     </label>
				<span id="customErrorPlacement" style="color:red; font-weight:bold"></span><br></br>
				<table style="width=100%;" class="table table-bordered table-striped table-condensed hoverable-table-in-dialog">
					<tbody>
						<th style="width: 8%;text-align:center">Build</th>
						<th style="width: 8%;text-align:center">SHA</th>
						<th style="text-align:center">Time</th>
						<th style="width:8%;text-align:center">Status</th>
					</tbody>
					<j:forEach items="${it.getDeploymentsByCompEnv(comp, 'Last Commit', limitDeploy)}" var="deployment">
					<tr>
						<td>
							<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get('buildNum')}</a>
						</td>
						<td>
							<span class="${deployment.get('buildNum')}_sha_forReplacement">TBD</span>
						</td>
						<td>
							<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(deployment.get('created_at'))}</a>
						</td>
						<td>
							<j:switch on="${deployment.get('buildstatus')}">
								<j:case value="SUCCESS">
									<!--<span title="SUCCESS" style="color:green;">&#10004;</span>-->
									<input type="radio" name="clientBuilds" id="${deployment.get('buildNum')}" value="${deployment.get('jobUrl')}"></input>
									<label title="SUCCESS" style="color:green;" for="${deployment.get('buildNum')}">       &#10004;</label>
								</j:case>
								<j:case value="FAILURE">
									<span title="FAILURE" style="color:darkred;">&#x2716;</span>
								</j:case>
								<j:case value="RUNNING">
									<span title="RUNNING" style="color:blue;">&#9658;</span>
								</j:case>
								<j:default>
									<span title="UNKNOWN" style="color:orange;">&#63;</span>
								</j:default>
							</j:switch>
						</td>
					</tr>
					</j:forEach>
				</table>
			</div>
		</j:forEach>
	</div>

	<br></br>

	<div id="PRDsection">
		<input type="checkbox" id="startcrjob"></input>
		<label for="startcrjob"> Start change request job upon successful deployment</label><br></br>
		
		<div id="prd-env-cr-job" style="text-align: left">
			<label id="CRjobPrompt">  Please provide details for </label><label id="cr-job-dep">Placeholder for CR Job Dep Name</label><label id="CRjobPrompt2"> by clicking Properties button</label><div class="divider"/><input type="button" id="properties" value="Properties"></input>
			<br></br><br></br>	
		</div>
		
		<input type="checkbox" id="startnj"></input>
		<label for="startnj"> Start nightly job upon successful execution of deployment and/or change request job</label><br></br>
		

		<div id="prd-env" style="text-align: left">
			<label id="njStartStepLabelQuestion">Do you want to start nightly job from a specific step (If No, the NJ will start from configured step which is usually step 1)?</label><div class="divider"/>
			<select id="njStartStepDecision" name="njStartStepDecision">
				<option value="">Choose...</option>
				<option value="no">No</option>
				<option value="yes">Yes</option>
			</select>
		</div>
		
		<div id="njstartstepSection">
			<label id="njstartstepLabel">Nightly job start step</label><div class="divider"/><input type="text" id="njstartstep" name="njstartstep"/><br></br>
		</div>
		
		<br></br>
		
		<label id="datetimepickerLabel">Deployment kick off date and time</label><div class="divider"/><input id="datetimepicker" name="datetimepicker" type="text"/>
	</div>
	
	<input type="hidden" id="clientAcronym" value=""/>
	<input type="hidden" id="environment" value=""/>
	<input type="hidden" id="core_version" value=""/>
	<input type="hidden" id="build_num" value=""/>
	<input type="hidden" id="secondsToWait" value=""/>
	<input type="hidden" id="ClientRevision" value=""/>
	
	<br></br>
	<br></br>
	<br></br>
	
	
	<input type="checkbox" id="norollback"></input>
	<label for="norollback"> Do not perform auto-rollback upon failed deployment</label>
	
	
	<br></br>
	
	<div id="buttons" style="text-align: right">
		<input type="submit" id="submit" value="Submit"/><div class="divider"/><span id="reset">Reset</span><div class="divider"/><span id="cancel">Cancel</span>
	</div>
	
</form>
<form id="dialog2" title="cr-job-title" style="display:none;" autocomplete="off">
	<!--<div id="CRjobsteps" style="display: none; height:200px; overflow: auto;">-->
	
		<!--<span id="customErrorPlacement2" style="color:red; font-weight:bold"></span><br></br>-->

		<div id="CRjobinfoTable" style="display: none; height:110px; overflow: auto;">
			<label id="CRjobstatusInfo">CR job status info</label>
			<table id="actualCRjobinfoTable" style="width=100%;" class="table table-bordered table-striped table-condensed hoverable-table-in-dialog">
				<tbody>
					<th style="width: 8%;text-align:center">start_step_id</th>
					<th style="width: 8%;text-align:center">date_modified</th>
					<th style="width: 8%;text-align:center">last_run_date</th>
					<th style="width: 8%;text-align:center">last_run_time</th>
					<th style="width: 8%;text-align:center">last_run_outcome</th>
					<th style="width: 8%;text-align:center">current_execution_status</th>
					<th style="width: 8%;text-align:center">current_execution_step</th>
					
				</tbody>
			</table>
		</div>
		
		<br></br>
		
		<div id="CRjobstepsTable" style="display: none; height:125px; overflow: auto;">
			<label id="CRjobstepsInfo">CR job steps</label>
			<table id="actualCRjobstepsTable" style="width=100%;" class="table table-bordered table-striped table-condensed hoverable-table-in-dialog">
				<tbody>
					<th style="width: 8%;text-align:center">step_id</th>
					<th style="width: 8%;text-align:center">step_name</th>
					<th style="width: 8%;text-align:center">subsystem</th>
					<th style="width: 8%;text-align:center">command</th>
					<th style="width: 8%;text-align:center">on_success_action</th>
					<th style="width: 8%;text-align:center">on_fail_action</th>
					<th style="width: 8%;text-align:center">choose</th>
				</tbody>
			</table>
		</div>
	
	<!--</div>-->
	
	<br></br>
	
	<div id="buttons2" style="text-align: left">
		<label id="CRjobstepActions">CR job step actions</label>
		<br></br>
		<input type="button" id="new" value="New"></input><div class="divider"/>
        <input type="button" id="edit" value="Edit"></input><div class="divider"/>
		<input type="button" id="delete" value="Delete"></input><div class="divider"/>
	</div>
	<br></br>
	
	
	<input type="hidden" id="activeDB" value=""/>
	<input type="hidden" id="activeServer" value=""/>
	
</form>
<div id="dialog3" title="Title place holder">
  <p id="dialog3text">Place holder for message</p>
</div>
<form id="dialog4" title="cr-job-step-title" style="display:none;" autocomplete="off">
	<div id="stepnameDefinition" style="text-align: left">
		<label id="stepnameLabel">Step name:</label><div class="divider"/><input id="stepname" name="stepname" type="text"/><br></br>
		<br></br>
		<label id="commandLabel">Command:</label>
		<br></br>
		<input type="button" id="parse" value="Parse"></input><div class="divider"/><div class="divider"/><div class="divider"/>
		<textarea id="SQLscript" name="SQLscript" rows="20" cols="80" placeholder="Please enter SQL script and make sure to specify name(s) of the database(s) in the query..."></textarea>
	</div>
</form>
</j:jelly>