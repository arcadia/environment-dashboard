<?xml version="1.0"?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
<link href="${rootURL}/plugin/environment-dashboard/css/bootstrap.min.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/bootstrap-theme.min.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/blink.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/dropdown_button.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/dynamic_dialog.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/jquery.datetimepicker.css" type="text/css" rel="stylesheet"/>
<link href="${rootURL}/plugin/environment-dashboard/css/jquery-ui.css" type="text/css" rel="stylesheet"/>
<script src="${rootURL}/plugin/environment-dashboard/js/jquery.datetimepicker.full.min.js"></script>
<script src="${rootURL}/plugin/environment-dashboard/js/jquery.validate.js"></script>
<script src="${rootURL}/plugin/environment-dashboard/js/jquery-ui.js"></script>

<div id="loader"></div>
<div id="loader2" style="display:none;"></div>

<script>
window.addEventListener('error', function (e) {
  var error = e.error;
  alert(error);
});

Q(window).load(function(){
	setTimeout(showDashboard, 3000);
});

function showDashboard() {
  Q("#loader").hide();
  Q("#startDashboard").show();
}
</script>



<div class="overlay" style="display:none; background-color: rgba(0, 0, 0, 0.4); position:absolute; top: 0; left:0; bottom:0; right:0;" onclick="hideAll()"></div>
<div class="popup" id="popup" style="position: absolute; width: 300px; height:150; display:none; background-color: white; text-align: center; top:50%; left:50%; margin-left: -150px; margin-top: -75;"></div>
<div id="startDashboard" style="margin-left: 0px; margin-right: 360px; display: none;">
	<input type="text" id="searchInput" style="width: 100%; font-size: 16px; padding: 12px 20px 12px 40px; border: 1px solid #ddd; margin-bottom: 12px;" onkeyup="filterTable()" placeholder="Search for clients.." title="Type in a client"/>
	<table id="envDashboard" class="table table-bordered table-striped table-condensed">
		<tbody>
			<j:switch on="${it.anyJobsConfigured()}">
				<j:case value="NONE">
					<tr>
						<div class="jumbotron">
							<h2>Hi, there!</h2>
							<p>You possibly haven't set up any jobs to use the Dashboard. Or if you have, the job hasn't run atleast once. You can configure the jobs by using the 'Details for Environment Dashboard' checkbox.</p>
						</div>
					</tr>
				</j:case>
				<j:case value="ENVS">
					<tr align="center">
						<th/>
						<j:set var="orderOfEnvs" value="${it.getOrderOfEnvs()}"/>
						<j:set var="orderOfComps" value="${it.getOrderOfComps()}"/>
						<j:set var="customColumnsList" value="${it.getCustomDBColumns()}"/>
						


						<j:forEach items="${orderOfEnvs}" var="envsHeader">
							<th style="text-align:center">
								<a style="text-decoration:none" title="View environment history" id="${envsHeader}_Header" href="javascript:toggle('${envsHeader}_History');">${envsHeader}</a>
								<div id="${envsHeader}_History" style="display: inline-block; position: fixed; top: 100; bottom: 100; left: 0; right: 0; width: 900px; height: 600px; position:fixed; margin: auto; padding: 10px; background-color: #FEFEFE; border: 1px solid; border-color: #DDDDDD; box-shadow: 1px 2px 1px #AAAAAA; border-radius: 15px; display:none; overflow: auto; overflow-x:hidden;">
									<div align="right">
										<b onclick="javascript:hideAll()" style="cursor: pointer">[X]</b>
									</div>
									<h3>${envsHeader}</h3>
									 <table class="table table-bordered table-striped table-condensed">
										<j:set var="limitDeploy" value="${it.getLimitDeployHistory()}"/>
										<tbody>
											<th style="text-align:center">Component</th>
											<th style="text-align:center">Build</th>

											<j:set var="hasPackageColumn" value="${false}"/>
											<j:forEach items="${it.getDeployments(envsHeader, limitDeploy)}" var="time">
												<j:if test="${it.getCompDeployed(envsHeader,time).get('packageName') != null &amp;&amp; !it.getCompDeployed(envsHeader,time).get('packageName').equals('')}">
													<j:set var="hasPackageColumn" value="${true}"/>
												</j:if>
											</j:forEach>
											<j:if test="${hasPackageColumn}">
												<th style="text-align:center">Package</th>
											</j:if> 
											<th style="text-align:center">Last Update</th>
										</tbody>
										<j:forEach items="${it.getDeployments(envsHeader, limitDeploy)}" var="time">
										<j:set var="deployment" value="${it.getCompDeployed(envsHeader,time)}"/>
											<tr>
												<td>${deployment.get("compName")}</td>
												<td>
													<j:switch on="${deployment.get('buildstatus')}">
														<a title="View" href="${deployment.get('buildJobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get("buildNum")}</a>
														<j:case value="SUCCESS">
															<span title="SUCCESS" style="color:green;">&#10004;</span>
														</j:case>
														<j:case value="FAILURE">
															<span title="FAILURE" style="color:darkred;">&#x2716;</span>
														</j:case>
														<j:case value="RUNNING">
															<span title="RUNNING" style="color:blue;">&#9658;</span>
														</j:case>
														<j:default>
															<span title="UNKNOWN" style="color:orange;">&#63;</span>
														</j:default>
													</j:switch>
												</td>
												<j:if test="${hasPackageColumn}">
													<td>
														${deployment.get("packageName")}
													</td>
												</j:if>
												<td>
													<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(time)}</a>
												</td>
											</tr>
										</j:forEach>
									</table>
								</div>

								<!-- Popup per Env per Component  -->
								<j:forEach items="${orderOfComps}" var="comp">
									<j:set var="compLastDeployed" value="${it.getCompLastDeployed(envsHeader, comp)}"/>
									<div id="${comp}_${envsHeader}_Popup" style="display: inline-block; position: fixed; top: 100; bottom: 100; left: 0; right: 0; width: 900px; height: 600px; position:fixed; margin: auto; padding: 10px; background-color: #FEFEFE; border: 1px solid; border-color: #DDDDDD; box-shadow: 1px 2px 1px #AAAAAA; border-radius: 15px; display:none; overflow: auto; overflow-x:hidden;">
										<div align="right">
											<b onclick="javascript:hideAll()" style="cursor: pointer">[X]</b>
										</div>
										<h3>${comp + "   |   " + envsHeader}</h3>
										 <table style="width=100%" class="table table-bordered table-striped table-condensed">
											<tbody>
												<th style="width: 8%;text-align:center">Build</th>
												<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
													<th style="text-align:center">Package</th>
												</j:if>
												<j:forEach items="${customColumnsList}" var="column">
													<j:if test="${compLastDeployed.get(column.toLowerCase()) != null}">
														<th style="text-align:center">${column.substring(0, 1).toUpperCase() + column.substring(1)}</th>
													</j:if>
												</j:forEach>
												
												<j:if test="${comp.indexOf('CRjob') == -1}"> 
													<th style="width:8%;text-align:center">Action</th>
												</j:if>
												<th style="width:8%;text-align:center">Status</th>
												<th style="text-align:center">Time</th>
											</tbody>
											
											<j:forEach items="${it.getDeploymentsByCompEnv(comp, envsHeader, limitDeploy)}" var="deployment">
													<tr>
														<td >
															<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get('buildNum')}</a>
														</td>
														<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
															<td style="word-wrap:break-word">
																${deployment.get('packageName')}
															</td>
														</j:if>
														<j:forEach items="${customColumnsList}" var="column">
															<j:if test="${compLastDeployed.get(column.toLowerCase()) != null}">
																<td style="max-width:20em;word-wrap:break-word">
																	${deployment.get(column.toLowerCase())}
																</td>
															</j:if>
														</j:forEach>
														<j:if test="${comp.indexOf('CRjob') == -1}"> 
														<td>
														  <code>
															
																<j:if test="${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1] != null}">
	 
																   <j:if test="${comp.indexOf('Backend') == -1 &amp;&amp; comp.indexOf('CRjob') == -1 &amp;&amp; comp.indexOf('Web') == -1}">
																		<j:switch on="${deployment.get('buildstatus')}">
																			<j:case value="SUCCESS">
																				<j:choose>
																					<j:when test="${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)] == 'Last Commit'}">
																						<a title="Promote" href="javascript:showClientDepDynamicDialog('${comp}',null,'${deployment.get('buildNum')}');">Promote</a>
																					</j:when>
																					<j:otherwise>
																						<a title="Promote" href="javascript:showClientDepDynamicDialog('${comp}','${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1]}','${deployment.get('buildNum')}');">Promote</a>
																					</j:otherwise>
																				</j:choose>
																			</j:case>
																			<j:case value="FAILURE">
																				 <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:case>
																			<j:case value="RUNNING">
																				 <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:case>
																			<j:default>																	
																				  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:default>
																		</j:switch>
																	</j:if>	
																	<j:if test="${comp.indexOf('Backend') != -1}">
																	
																			<j:switch on="${deployment.get('buildstatus')}">
																			<j:case value="SUCCESS">
																				 <a title="Promote" href="javascript:showBackendDepDynamicDialog('${comp}','${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1]}','${deployment.get('buildNum')}');">Promote</a>
																			</j:case>
																			<j:default>																
																				  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:default>
																		</j:switch>
																		
																	</j:if> 
																	<j:if test="${comp.indexOf('Web') != -1}">
																	
																			<j:switch on="${deployment.get('buildstatus')}">
																			<j:case value="SUCCESS">
																				 <a title="Promote" href="javascript:showWebDepDynamicDialog('${comp}','${orderOfEnvs[orderOfEnvs.indexOf(envsHeader)+1]}','${deployment.get('buildNum')}');">Promote</a>
																			</j:case>
																			<j:default>																
																				  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																			</j:default>
																		</j:switch>
																		
																	</j:if> 

																	
																</j:if> 
															 
														 </code>
														</td>
														</j:if>
														<td>
															<j:switch on="${deployment.get('buildstatus')}">
																<j:case value="SUCCESS">
																	<span title="SUCCESS" style="color:green;">&#10004;</span>
																</j:case>
																<j:case value="FAILURE">
																	<span title="FAILURE" style="color:darkred;">&#x2716;</span>
																</j:case>
																<j:case value="RUNNING">
																	<span title="RUNNING" style="color:blue;">&#9658;</span>
																</j:case>
																<j:default>
																	<span title="UNKNOWN" style="color:orange;">&#63;</span>
																</j:default>
															</j:switch>
														</td>
														<td>
															<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(deployment.get('created_at'))}</a>
														</td>
													</tr>
											</j:forEach>	  
										</table>
									</div>
								</j:forEach>


								<!-- Component History -->
								<j:forEach items="${orderOfComps}" var="comp">
									<j:set var="compLastDeployed" value="${it.getCompLastDeployed(envsHeader, comp)}"/>
									<div id="${comp}_History" style="display: inline-block; position: fixed; top: 100; bottom: 100; left: 0; right: 0; width: 900px; height: 600px; position:fixed; margin: auto; padding: 10px; background-color: #FEFEFE; border: 1px solid; border-color: #DDDDDD; box-shadow: 1px 2px 1px #AAAAAA; border-radius: 15px; display:none; overflow: auto; overflow-x:hidden;">
										<div align="right">
											<b onclick="javascript:hideAll()" style="cursor: pointer">[X]</b>
										</div>
										<h3>${comp} History</h3>
										 <table class="table table-bordered table-striped table-condensed">
											<tbody>
												<th style="text-align:center">Env</th>
												<th style="text-align:center">Build</th>
												<th style="text-align:center">Status</th>
												<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
													<th style="text-align:center">Package</th>
												</j:if>
												<th style="text-align:center">Time</th>
											</tbody>
											
											<j:forEach items="${it.getDeploymentsByComp(comp, limitDeploy)}" var="deployment">
												<tr>
													<td>
														${deployment.get('envName')}
													</td>
													<td>
														<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get('buildNum')}</a>
													</td>
													<td>
														<j:switch on="${deployment.get('buildstatus')}">
															<j:case value="SUCCESS">
																<span title="SUCCESS" style="color:green;">&#10004;</span>
															</j:case>
															<j:case value="FAILURE">
																<span title="FAILURE" style="color:darkred;">&#x2716;</span>
															</j:case>
															<j:case value="RUNNING">
																<span title="RUNNING" style="color:blue;">&#9658;</span>
															</j:case>
															<j:default>
																<span title="UNKNOWN" style="color:orange;">&#63;</span>
															</j:default>
														</j:switch>
													</td>
													<j:if test="${compLastDeployed.get('packageName') != null &amp;&amp; !compLastDeployed.get('packageName').equals('')}">
														<td>
															${deployment.get('packageName')}
														</td>
													</j:if>
													<td>
														<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(deployment.get('created_at'))}</a>
													</td>
												</tr>
											</j:forEach>	  
										</table>
									</div>
								</j:forEach>
							</th>
						</j:forEach>
					</tr>


					<!-- Main dashboard -->
					<j:forEach items="${orderOfComps}" var="comps">
						<tr>
							<td align="center"><strong><a href="javascript:toggle('${comps}_History')">${comps}</a></strong></td>
							<j:forEach items="${orderOfEnvs}" var="env">
							
								<j:set var="deployment" value="${it.getCompLastDeployed(env, comps)}"/>
								
								<j:choose>
									<j:when test="${!deployment.isEmpty()}">
										<j:switch on="${deployment.get('buildstatus')}">
											<j:case value="SUCCESS">
												<j:set var="bgcol" value="#DAF5DA;"/>
												<j:set var="clss" value="notused"/>
												<j:set var="extn" value=""/>
											</j:case>
											<j:case value="FAILURE">
												<j:set var="bgcol" value="#FF6666;"/>
												<j:set var="clss" value="notused"/>
												<j:set var="extn" value=""/>
											</j:case>
											<j:case value="RUNNING">
												<j:set var="bgcol" value="#ffffff;"/>
												<j:set var="clss" value="deploying"/>
												<j:set var="extn" value="console"/>
											</j:case>
											<j:default>
												<j:set var="bgcol" value="#eccf97;"/>
												<j:set var="clss" value="notused"/>
												<j:set var="extn" value="console"/>
											</j:default>
										</j:switch>
									</j:when>
									<j:otherwise>
										<j:set var="bgcol" value="#E8E8E8;"/>
										<j:set var="clss" value="notused"/>
										<j:set var="extn" value="console"/>
									</j:otherwise>
								</j:choose>
			

                    
								<td class="${clss}" style="background-color:${bgcol} padding 1.5% 1.5%;" align="center">
									<j:if test="${!deployment.isEmpty()}">
										<a style="text-decoration:none; color:blue; font-size:medium;" title="View" href="javascript:toggle('${comps}_${env}_Popup');">
											<strong>
												<j:if test="${deployment.get('packageName').equals('') || deployment.get('packageName') == null}">${deployment.get('buildNum')}</j:if>
												<j:if test="${!deployment.get('packageName').equals('') &amp;&amp; deployment.get('packageName') != null}">${deployment.get('packageName')}</j:if>
												<j:switch on="${deployment.get('buildstatus')}">
													<j:case value="SUCCESS">
														<span title="SUCCESS" style="color:green;">&#10004;</span>
													</j:case>
													<j:case value="FAILURE">
														<span title="FAILURE" style="color:darkred;">&#x2716;</span>
													</j:case>
													<j:case value="RUNNING">
														<span title="RUNNING" style="color:blue;">&#9658;</span>
													</j:case>
													<j:default>
														<span title="UNKNOWN" style="color:orange;">&#63;</span>
													</j:default>
												</j:switch>
											</strong>
										</a>
										<div align="right">
											<code>
												<a style="font-size:small; text-decoration:none;" title="View Deployment" href="${deployment.get('jobUrl')}${extn}" target="AnalyticsBuildsDeployments">[${it.getNiceTimeStamp(deployment.get('created_at'))}]</a>
											</code>
										</div>
										<div align="right">
											<code>
												<j:if test="${orderOfEnvs[orderOfEnvs.indexOf(env)+1] != null}">
													<j:if test="${orderOfEnvs.indexOf(env) != 0}">
											
															<j:if test="${comps.indexOf('Backend') == -1 &amp;&amp; comps.indexOf('CRjob') == -1 &amp;&amp; comps.indexOf('Web') == -1}">
															<j:switch on="${deployment.get('buildstatus')}">
																<j:case value="SUCCESS">
																	 <a title="Promote" href="javascript:showClientDepDynamicDialog('${comps}','${orderOfEnvs[orderOfEnvs.indexOf(env)+1]}','${deployment.get('buildNum')}');">Promote${it.envVars}</a>
																</j:case>
																<j:default>																	
																	  <a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																</j:default>
															 </j:switch>
																
															</j:if>	
															
															<j:if test="${comps.indexOf('Backend') != -1}">  
												
																<j:switch on="${deployment.get('buildstatus')}">
																	<j:case value="SUCCESS">
																		<a title="Promote" href="javascript:showBackendDepDynamicDialog('${comps}','${orderOfEnvs[orderOfEnvs.indexOf(env)+1]}','${deployment.get('buildNum')}');">Promote</a>
																	</j:case>
																	<j:default>																	
																		<a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																	</j:default>
																</j:switch>

																
															</j:if> 
															
															<j:if test="${comps.indexOf('Web') != -1}">  
												
																<j:switch on="${deployment.get('buildstatus')}">
																	<j:case value="SUCCESS">
																		<a title="Promote" href="javascript:showWebDepDynamicDialog('${comps}','${orderOfEnvs[orderOfEnvs.indexOf(env)+1]}','${deployment.get('buildNum')}');">Promote</a>
																	</j:case>
																	<j:default>																	
																		<a title="Promote" href="javascript:void(0)" class="disabled">Promote</a>
																	</j:default>
																</j:switch>

																
															</j:if> 
														 
													</j:if> 
												</j:if>
											</code>
										</div>
									</j:if>
									<j:if test="${orderOfEnvs.indexOf(env) == 0}">
										
										<j:forEach items="${orderOfEnvs}" var="env_promote">


											<!-- don't promote to itself -->
											<j:if test="${env_promote != env}">
											
												
												
												   <!-- DROPDOWN MENUS FOR PERFORMING BACKEND DEPLOYMENTS under 'Last Commit' column-->
													<j:if test="${comps.indexOf('Backend') != -1}">  
													<j:set var="tags" value="${it.getOrderOfTags(comps,env_promote)}"/>
													
														 <j:set var="SpaceIndex" value="${comps.indexOf(' ',1)}"/>
														 <j:set var="client" value="${comps.substring(0,SpaceIndex)}"/>
														 <j:set var="lastcommit" value="${it.getCompLastDeployed('Last Commit', client)}"/>
													 
															
														<div class="dropdown" style="float:right;">
																<button class="dropbtn" >Deploy to ${env_promote}...</button>
														  <div id="myDropdown${env_promote}" class="dropdown-content">
															<code>
																<j:forEach items="${tags}" var="tag">
																	<j:if test="${env_promote == 'DEV'}">
																		<j:if test="${lastcommit.get('buildstatus') != 'SUCCESS'}">
																			<a href="javascript:void(0)" class="disabled">${tag}</a>
																		</j:if>
																	</j:if>
																	<j:if test="${env_promote != 'DEV' || lastcommit.get('buildstatus') == 'SUCCESS'}">
																		<a href="javascript:showBackendDepDynamicDialog('${comps}','${env_promote}', '${tag}');">${tag}</a>
																	</j:if>
																</j:forEach>
															</code>
														  </div>
														</div>
													</j:if>
													
													<!-- PROMOTE LINKS under 'Last Commit' column -->
													<j:if test="${comps.indexOf('Backend') == -1 &amp;&amp; comps.indexOf('CRjob') == -1 &amp;&amp; comps.indexOf('Web') == -1}"> 
														<div style="margin-right:30px; float:right;">
															<j:switch on="${deployment.get('buildstatus')}">
																<j:case value="SUCCESS">
																	  <a href="javascript:javascript:showClientDepDynamicDialog('${comps}','${env_promote}','${deployment.get('buildNum')}');">Promote to ${env_promote}</a>
																</j:case>
																<j:default>																	
																	  <a href="javascript:void(0)" class="disabled">Promote to ${env_promote}</a>												
																</j:default>
															</j:switch>
														</div>	
														
													  											
													</j:if>
													
													<!-- CRjob LINKS under 'Last Commit' column -->
													<j:if test="${comps.indexOf('CRjob') != -1}"> 
														<div style="margin-right:30px; float:right;">
															<a href="javascript:javascript:showCRjobDynamicDialog('${comps}','${env_promote}');">Initiate at ${env_promote}</a>
														</div>								
													</j:if>
													
												   <!-- DROPDOWN MENUS FOR PERFORMING WEB DEPLOYMENTS under 'Last Commit' column-->
													<j:if test="${comps.indexOf('Web') != -1}">  
													<j:set var="webtags" value="${it.getOrderOfWebOrBinderyFrontTags('web')}"/>
															
														<div class="dropdown" style="float:right;">
																<button class="dropbtn2" >Deploy to ${env_promote}...</button>
														  <div id="myDropdown${env_promote}" class="dropdown-content">
															<code>
																<j:forEach items="${webtags}" var="webtag">
																	<a href="javascript:showWebDepDynamicDialog('${comps}','${env_promote}', '${webtag}');">${webtag}</a>
																</j:forEach>
															</code>
														  </div>
														</div>
													</j:if>
													
												
											</j:if>
										</j:forEach>
									</j:if>
								</td>

							</j:forEach>
						</tr>
					</j:forEach>

					<script language="javascript">
						
						var validationObj;
						var validationObj2;
						var refreshIntervalId;
						var prevBuildForFoundSHA;
						var typeofDeployment;
						var CRjob;
						var CRjobstepActionType;
						
						//Create a proxy for EnvDashView Java object on a server side so it can later be used during AJAX calls
						var EnvDashViewProxy;
						
						var authorizedForPRDactions = "TBD";
						
						var futureDateTime;
						var serverDateTime;
						var NJdetails;
						var NJStartdetails;
						var NJexistence = false;
						var NJStartExistence = false;
						var noInitialEnv = false;
						var propertiesButtonClicked = false;
						
						//Hide the dynamic dialog initially after the page loads					
						Q(document).ready(function(){
						
							//alert(window.location.pathname);
							
							EnvDashViewProxy = <st:bind value="${it}"/>;
							
							//Make dummy calls to server side using proxy so 404 error can be avoided
							var response5;
							var date2;
							setInterval(function() {
								EnvDashViewProxy.maintainConnectivityToProxy(function(t) {
									 response5 = t.responseObject();
								});
							}, 300 * 1000); // 5 minutes
							
							
							Q("#overlay, #dialog, #dialog2, #ClientRevisionSection, #non-dev-env, #PRDsection, #prd-env, #njstartstepSection, #envSection, #prd-env-cr-job, #kickoffDateTimeSection, #schedActivitySection, #optional-web-bindery-frontend, #binderyfrontend-versions, #current-bindery-frontend-version").hide();
							Q("#dialog").draggable();
							
							Q("#dialog3").dialog({
								autoOpen: false, 
								modal: true,
								draggable: true,
								dialogClass: "titlebar"
							});
							
							
							//Q("#dialog3").dialog("option","title","Debug");
							//Q("#dialog3text").text(EnvDashViewProxy);
							//Q("#dialog3").dialog("open");
							
							
							Q("#dialog2").dialog({
								//create: function( e, ui ) { this.element.css( "z-index", "0" ); },
								autoOpen: false, 
								modal: true,
								//zIndex: 0,
								draggable: true,
								resizable: false,
								autoResize: true,
								width: 1000,
								//height: 600,
								dialogClass: "no-close",
								//open: function (event, ui) {
								 //Q('.ui-dialog').css('z-index',1);
								 //Q('.ui-widget-overlay').css('z-index',0);
								//},
								buttons: {
								OK: function (e) {
										//Q(this).submit();
										// Stop form from submitting normally
										e.preventDefault();
										
										//Save CR job step
										//alert(Q("#SQLscript").val());
										//alert(Q("#activeServer").val());
										
										// Setter
										//Q(this).dialog( "option", "modal", false );
										Q("#overlay3").show();
										Q("#loader2").show();
										
										//Loop through CRjob steps and find the max step_id
										var step_ids = [];
										var last_step_id;
										
										Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
											step_ids.push(Q(this).find("#step_id").text());
										});
										
										last_step_id = Math.max.apply(Math, step_ids);
										
										
										//Loop through CRjob steps and update all of the steps
										var response4;
										var i = 1;
										var step_id;
										var step_name;
										var subsystem;
										var command;
										var on_success_action;
										
										var CRjobStepsJSONobj = {
												CRjobsteps: []
											};
										var JSONObjToSend;
										
										var invalidStep = false;
										
										Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
										
											command = Q('.' + Q(this).find("#step_id").text() + "_for_command_retrieval").text();
								
											if (Q(this).find("#step_id").text() == last_step_id)
											{
												on_success_action = 1;
												on_fail_action = 2;
											}
											else
											{
												
												
												//on_success_action = 3;
												//Q(this).find("#on_success_action").text();
												//Q(this).find("#on_fail_action").text();
												
												switch (Q(this).find("#on_success_action").text()) {
												  case "goto next step":
													on_success_action = 3;
													break;
												  case "quit with success":
													on_success_action = 1;
													break;
												  default:
													invalidStep = true;
													Q("#loader2").hide();
													Q("#overlay3").hide();
													
													Q("#dialog3").dialog("option","title","Failure");
													Q("#dialog3text").text(Q(this).find("#on_success_action").text() + ' on_success_action cannot be saved');
													Q("#dialog3").dialog("open");
													return false;
												}
												
												
											    switch (Q(this).find("#on_fail_action").text()) {
												  case "goto next step":
													on_fail_action = 3;
													break;
												  case "quit with failure":
													on_fail_action = 2;
													break;
												  default:
													invalidStep = true;
													Q("#loader2").hide();
													Q("#overlay3").hide();
													
													Q("#dialog3").dialog("option","title","Failure");
													Q("#dialog3text").text(Q(this).find("#on_fail_action").text() + ' on_fail_action cannot be saved');
													Q("#dialog3").dialog("open");
													return false;
												}
												
												
											}
											
											
											step_name = Q(this).find("#step_name").text();
											subsystem = Q(this).find("#subsystem").text();
										  
											CRjobStepsJSONobj.CRjobsteps.push({ 
												"job_name" : CRjob,
												"step_name" : step_name,
												"subsystem" : subsystem,
												"command" : command,
												"on_success_action" : on_success_action,
												"on_fail_action" : on_fail_action
											});
												
										});
										

										if (!invalidStep)
										{
											//alert(CRjobStepsJSONobj);

											 EnvDashViewProxy.AddCRjobSteps(Q("#activeServer").val(),CRjob,CRjobStepsJSONobj,function(t) {
												 response4 = t.responseObject();
												 if (response4.indexOf("failed") == -1)
												 {
													//Processing CRjob steps succeeded
													//Q("#dialog3").dialog("option","title","Success");
													//Q("#dialog3text").text(response4);
													//Q("#dialog3").dialog("open");
													//console.log(response4);
													
													Q("#loader2").hide();
													Q("#overlay3").hide();
													//Q(this).dialog( "option", "modal", true );												
													Q("#dialog2").dialog("close");
												 
												 }
												 else
												 {
													Q("#loader2").hide();
													Q("#overlay3").hide();
													//Q(this).dialog( "option", "modal", true );
												 
													Q("#dialog3").dialog("option","title","Failure");
													Q("#dialog3text").text(response4);
													Q("#dialog3").dialog("open");
												 
												 }
												 
											});
										}
										
									},
									Cancel: function () {
										Q(this).trigger("reset");
										Q(this).dialog("close");
									}
								}
							}).prev(".ui-dialog-titlebar").css("background","#81BEF7");
							
							
							validationObj = Q("#dialog").validate({ // initialize the plugin
								submitHandler: function(form, e) {									
								    
									// Stop form from submitting normally
									e.preventDefault();
									
									var proceed = false;
									
									if(Q("#startcrjob").is(":checked") || typeofDeployment == "CRjob")
									{
										if(!propertiesButtonClicked)
										{
											Q("#dialog3").dialog("option","title","Warning");
											Q("#dialog3text").text("It looks like you did not click Properties button for change_request job. Please do so so you can update SQL CR job with needed SQL query or script.");
											Q("#dialog3").dialog("open");
										
										}
										else
										{
											proceed = true;
										
										}
									}
									else
									{
										proceed = true;
									
									}
									
									
									if(proceed)
									{
										//calculate seconds so we know when the jenkins build needs to be triggered									
										if(Q("#datetimepicker").val())
										{
											var diff = Math.round((futureDateTime - serverDateTime)/1000);
											Q("#secondsToWait").val(diff);
										}
										else
										{
											Q("#secondsToWait").val(0);
										}
																			
										
										//alert("client version " + Q("#build_num").val());
										//alert("core version " + Q("#core_version").val());
										//alert("type of deployment is " + typeofDeployment);
										
										//Determine what type of deployment needs to be performed		
										if (Q("#build_num").val().length != 0 &amp;&amp; Q("#core_version").val().length == 0 &amp;&amp; typeofDeployment == "client")
										{
											//Perform client deployment
											startDeployment("client",Q("#clientAcronym").val(),Q("#environment").val(),Q("#build_num").val(),"NA");
										}
										else if (Q("#core_version").val().length != 0 &amp;&amp; Q("#build_num").val().length == 0 &amp;&amp; typeofDeployment == "backend")
										{
											//Perform backend deployment		
											startDeployment("backend",Q("#clientAcronym").val(),Q("#environment").val(),Q("#core_version").val(),"NA");
										}
										else if (typeofDeployment == "CRjob")
										{
											//Initiate CR job
											startDeployment("CRjob",Q("#clientAcronym").val(),Q("#environment").val(),"NA","NA");

										}
										else if (typeofDeployment == "web")
										{
											//Initiate web deploy
											
											if (Q("#WebBinderyFrontEndDecision").val() == "yes" || Q("#web_version").val() == "binderyFrontendSubDeploy")
											{
												Q("#binderyFrontendVersion").val(Q("#binderyfrontendVersionDecision").val());
											}
											
											//alert(Q("#binderyFrontendVersion").val());
											
											startDeployment("web",Q("#clientAcronym").val(),Q("#environment").val(),Q("#webVersion").val(),Q("#binderyFrontendVersion").val());

										}
										else
										{
											//alert("something went wrong");
											Q("#dialog3").dialog("option","title","Error");
											Q("#dialog3text").text("something went wrong");
											Q("#dialog3").dialog("open");
										}
									}
									
								},
								rules: {
									ClientRevision: {
										required: true,
										minlength: 40,
										maxlength: 40,
										// Using the normalizer to trim the value of the element
										// before validating it.
										//
										// The value of `this` inside the `normalizer` is the corresponding
										// DOMElement. In this example, `this` references the `username` element.
										normalizer: function(value) {
											return Q.trim(value);
										}
									},
									clientBuilds: {
										required: true
									},
									ClientRevisionDecision: {
										required: true
									},
									WebBinderyFrontEndDecision: {
										required: true
									},
									binderyfrontendVersionDecision: {
										required: true
									},
									njstartstep: {
										required: true,
										// Using the normalizer to trim the value of the element
										// before validating it.
										//
										// The value of `this` inside the `normalizer` is the corresponding
										// DOMElement. In this example, `this` references the `username` element.
										normalizer: function(value) {
											return Q.trim(value);
										}
									},
									njStartStepDecision: {
										required: true
									},
									datetimepicker: {
										required: true,
										//remote: "/plugin/environment-dashboard/json/test.json"
										remote: {
											//url: "/plugin/environment-dashboard/json/test.json",
											url: window.location.pathname + "getServerDateTimeLocal",
											datatype: 'html',
											dataFilter: function(data) {
												//alert('in datafilter section');
												//alert(data);
												
												 //Passed time
												 futureDateTime = new Date(Q("#datetimepicker").val());
												 //console.log("passed time is " + futureDateTime);
												 
												 //Server time
												 //console.log("retrieved server time is " + data);
												 serverDateTime = new Date(data);
												 //console.log("server time is " + serverDateTime);
												 
												 if (futureDateTime &gt; serverDateTime)
												 {
													//console.log("future date is greater than server time");
													
													//Check the start time of NJ
													var NJNextRunDateTime;
													if (NJexistence)
													{
														NJNextRunDateTime = getClientJobNextRunDateTime(NJdetails, serverDateTime);
														if (NJNextRunDateTime != false)
														{
															if (futureDateTime &lt; NJNextRunDateTime)
															{
																return '"true"';
															
															}
															else
															{
															    Q("#dialog3").dialog("option","title","Warning");
																
																if (typeofDeployment == "CRjob")
																{
																	Q("#dialog3text").text("client's NJ will kick off before/at requested scheduled time. Client's NJ will start on " + NJNextRunDateTime + ". Please schedule CR job 10 minutes earlier before NJ start time.");
																	//console.log("client's NJ will kick off before/at requested scheduled time. Client's NJ will start on " + NJNextRunDateTime + ". Please schedule CR job 10 minutes earlier before NJ start time.");
																}
																else
																{
																	Q("#dialog3text").text("client's NJ will kick off before/at requested scheduled time. Client's NJ will start on " + NJNextRunDateTime + ". Please schedule deployment 10 minutes earlier before NJ start time.");
																	//console.log("client's NJ will kick off before/at requested scheduled time. Client's NJ will start on " + NJNextRunDateTime + ". Please schedule deployment 10 minutes earlier before NJ start time.");
																}
																
																
																Q("#dialog3").dialog("open");
																
																
																//return '"false"';
																return "\"client's NJ will be running at this time\"";
															    
															}
														
														}
														else
														{
															if (NJStartExistence)
															{
																NJNextRunDateTime = getClientJobNextRunDateTime(NJStartdetails, serverDateTime);
																if (NJNextRunDateTime != false)
																{
																	if (futureDateTime &lt; NJNextRunDateTime)
																	{
																		return '"true"';
																	
																	}
																	else
																	{
																		Q("#dialog3").dialog("option","title","Warning");
																		
																		if (typeofDeployment == "CRjob")
																		{
																			Q("#dialog3text").text("client's NJ Start will kick off before/at requested scheduled time. Client's NJ Start will start on " + NJNextRunDateTime + ". Please schedule CR job 10 minutes earlier before NJ Start start time.");
																			//console.log("client's NJ Start will kick off before/at requested scheduled time. Client's NJ Start will start on " + NJNextRunDateTime + ". Please schedule CR job 10 minutes earlier before NJ Start start time.");																				
																		}
																		else
																		{
																			Q("#dialog3text").text("client's NJ Start will kick off before/at requested scheduled time. Client's NJ Start will start on " + NJNextRunDateTime + ". Please schedule deployment 10 minutes earlier before NJ Start start time.");
																			//console.log("client's NJ Start will kick off before/at requested scheduled time. Client's NJ Start will start on " + NJNextRunDateTime + ". Please schedule deployment 10 minutes earlier before NJ Start start time.");																		
																		}
																		
																		
																		Q("#dialog3").dialog("open");		
																		
																		//return '"false"';
																		return "\"client's NJ Start will be running at this time\"";
																		
															
																	}
																
																}
																else
																{
																
																	return '"true"';
																
																}
															}
															else
															{												
																	return '"true"';
															}
														
														}
														

													}
													else
													{
														return '"true"';
													}
													
												 }
												 else
												 {
													//console.log("future date is less than server time");
													//return '"false"';
													return "\"please enter the date and time into the future\"";
												 
												 }
												
											},
											//complete: function() {
												//alert('in complete section');
												//alert(data);
												//return '"true"';
												
												//return true;
												
											//},
											error: function(xhr, textStatus, errorThrown) {
												//alert('ajax loading error... ... ' + textStatus + ' ' + errorThrown + ' ' + xhr.responseText);
												
												Q("#dialog3").dialog("option","title","Error");
												Q("#dialog3text").text("ajax loading error... " + textStatus + " " + errorThrown + " " + xhr.responseText);
												Q("#dialog3").dialog("open");
												
												return "\"ajax loading error\"";
												//return '"false"';
												
											}
										}
									},
								    EnvDecision: {
										required: true
									}
								},
								messages: {
									ClientRevision: {
										required: "client revision is required",
										minlength: "value needs to be 40 characters long",
										maxlength: "value needs to be 40 characters long"
									},
									clientBuilds: "please choose the stable build",
									ClientRevisionDecision: "please make a choice",
									WebBinderyFrontEndDecision: "please make a choice",
									binderyfrontendVersionDecision: "please make a choice",
									njStartStepDecision: "please make a choice",
									datetimepicker: {
										required: "please schedule this deployment/activity",
										remote: "please enter the date and time into the future"
									},
									njstartstep: "please enter name of the step",
									EnvDecision: "please make a choice"
								},
								errorPlacement: function(error, element) {
									if (element.attr("name") == "clientBuilds" )
										Q("#customErrorPlacement").text(Q(error).text());
									else
									{
										error.insertAfter(element);	
									}
								}
							});
							
							
							
							validationObj2 = Q("#dialog4").validate({ // initialize the plugin
								/*
							    submitHandler: function(form) {
									doAjaxPost();
								},*/
								rules: {
									stepname: {
										required: true,
										normalizer: function(value) {
											return Q.trim(value);
										}
									},
									SQLscript: {
										required: true
									},
									on_success_actionDecision: {
										required: true
									},
									on_fail_actionDecision: {
										required: true
									}
								},
								messages: {
									stepname: "step name is required",
									SQLscript: "command is required",
									on_success_actionDecision: "selection is required",
									on_fail_actionDecision: "selection is required"
								},
								errorPlacement: function(error, element) {
									if (element.attr("name") == "stepname")
									{
										error.insertAfter(element);	
									}
									else
									{
										error.appendTo("#SQLscriptRequired");
									}
								}
							});
							
							
							
							Q("#dialog4").dialog({
								autoOpen: false, 
								modal: true,
								draggable: true,
								resizable: false,
								autoResize: true,
								width: 1000,
								//height: 600,
								dialogClass: "no-close",
								buttons: {
									OK: function (e) {
										//Q(this).submit();
										if(!validationObj2.form())
										{  
										  e.preventDefault(); 
										}
										else
										{
											// Stop form from submitting normally
											e.preventDefault();
											
											var i;
											var proceed;
											var id;
											
	
											
										    //store the changes temporarily;
											if (CRjobstepActionType == "edit")
											{
											
												id = Q("input[name=CRjobsteps]:checked", "#actualCRjobstepsTable").val();

												Q("#actualCRjobstepsTable").find("#" + id + "").find("#step_name").text(Q("#stepname").val().trim());
												Q("#actualCRjobstepsTable").find("." + id + "_for_command_retrieval").text(Q("#SQLscript").val());
												Q("#actualCRjobstepsTable").find("#" + id + "").find("#command_substring").text(Q("#SQLscript").val().substring(0, 14));
												Q("#actualCRjobstepsTable").find("#" + id + "").find("#subsystem").text("TSQL");
												
												//Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_success_action").text(Q("#on_success_actionDecision").find(":selected").text());
												//Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_fail_action").text(Q("#on_fail_actionDecision").find(":selected").text());
												
												Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_success_action").text(Q("#on_success_actionDecision").val());
												Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_fail_action").text(Q("#on_fail_actionDecision").val());
											
												Q(this).dialog("close");
												
											}
											else if (CRjobstepActionType == "new")
											{
											
												proceed = true;
												
												Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
													
													if (Q(this).find("#step_name").text().trim() == Q("#stepname").val().trim())
													{
														Q("#dialog3").dialog("option","title","Error");
														Q("#dialog3text").text(Q("#stepname").val() + " step already exists");
														Q("#dialog3").dialog("open");
														proceed = false;
														return false;
													}

												});	

												
												if (proceed)
												{
												
												
													//Loop through CRjob steps and find the max step_id
													var step_ids = [];
													var next_step_id;
													var last_step_id;
													
													var empty = true;
													Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
														empty = false;
														step_ids.push(Q(this).find("#step_id").text());
													});

													
													if (empty)
													{
														next_step_id = 1;
													}
													else
													{
														last_step_id = Math.max.apply(Math, step_ids);
														next_step_id = last_step_id + 1;
																												
														//Q("#actualCRjobstepsTable").find("#" + last_step_id + "").find("#on_success_action").text("goto next step");
													}
													
													
													//console.log(last_step_id);
													//console.log(next_step_id);
													
													
													Q("#actualCRjobstepsTable").append('<tr id="' + next_step_id + '">' +
														 '<td id="step_id" style="width: 8%;text-align:center">' + next_step_id + '</td>' +
														 '<td id="step_name" style="width: 8%;text-align:center">' + Q("#stepname").val().trim() + '</td>' +
														 '<td id="subsystem" style="width: 8%;text-align:center">' + "TSQL" + '</td>' +
														 '<td id="command_substring" style="width: 8%;text-align:center">' + Q("#SQLscript").val().substring(0, 14) + '...</td>' +
														 //'<td style="width: 8%;text-align:center;visibility:hidden"><textarea class="' + next_step_id + '_for_command_retrieval">' + element.command + '</textarea></td>' +	 
														
														
														//'<td id="on_success_action" style="width: 8%;text-align:center">' + "quit with success" + '</td>' +
														//'<td id="on_fail_action" style="width: 8%;text-align:center">' + "quit with failure" + '</td>' +
														
														'<td id="on_success_action" style="width: 8%;text-align:center">' + Q("#on_success_actionDecision").val() + '</td>' +
														'<td id="on_fail_action" style="width: 8%;text-align:center">' + Q("#on_fail_actionDecision").val() + '</td>' +
														
														//'<td id="on_success_action" style="width: 8%;text-align:center">' + Q("#on_success_actionDecision").find(":selected").text() + '</td>' +
														//'<td id="on_fail_action" style="width: 8%;text-align:center">' + Q("#on_fail_actionDecision").find(":selected").text() + '</td>' +
														
														 '<td id="radioButton" style="width: 8%;text-align:center"><input type="radio" name="CRjobsteps" value="' + next_step_id + '"></input></td>' +
														 
														 //'<td>EditButton</td>' +
														 //'<td style="width: 8%;text-align:center"><input type="button" id="edit" value="edit"></input></td>' +
													 '</tr>');
												 
												   Q("#actualCRjobstepsTable").append('<textarea style="display:none;" class="' + next_step_id + '_for_command_retrieval">' + Q("#SQLscript").val() + '</textarea>');	 

												   EnableDisableEditAndDeleteButtons();
												   
													Q(this).dialog("close");
												}										
											}
											
											
											//Q("#on_success_actionDecision option[selected]").removeAttr("selected");
											//Q("#on_fail_actionDecision option[selected]").removeAttr("selected");
											
					
										}
									},
									Cancel: function () {
										Q(this).trigger("reset");
										validationObj2.resetForm();
										Q(this).dialog("close");
									}
								}
							}).prev(".ui-dialog-titlebar").css("background","#81BEF7");
							
							
							Q("#reset").click(function(){
								CloseResetDynamicDialog("reset");
							});
							
							Q("#cancel").click(function(){
								CloseResetDynamicDialog("close");
							});
							
							
							Q("#edit").click(function(){
							
								if (Q("input:radio[name=CRjobsteps]", "#actualCRjobstepsTable").is(":checked"))
								{
									CRjobstepActionType = "edit";
									var id = Q("input[name=CRjobsteps]:checked", "#actualCRjobstepsTable").val();
									
									Q("#stepname").val(Q("#actualCRjobstepsTable").find("#" + id + "").find("#step_name").text());
									Q("#SQLscript").val(Q("#actualCRjobstepsTable").find("." + id + "_for_command_retrieval").text());
															
									Q("#dialog4").dialog("option","title",Q("#actualCRjobstepsTable").find("#" + id + "").find("#step_name").text());
									
									//Q("#on_success_actionDecision").text(Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_success_action").text());
									//Q("#on_fail_actionDecision").text(Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_fail_action").text());
									
									//Q("on_success_actionDecision").find('option:contains(Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_success_action").text())').attr("selected",true);
									//Q("on_fail_actionDecision").find('option:contains(Q("#actualCRjobstepsTable").find("#" + id + "").find("#on_fail_action").text())').attr("selected",true);
									
									//Q("#on_success_actionDecision option:contains(" + Q('#actualCRjobstepsTable').find('#' + id + "").find('#on_success_action').text() + ")").attr('selected', 'selected');
									//Q("#on_fail_actionDecision option:contains(" + Q('#actualCRjobstepsTable').find('#' + id + "").find('#on_fail_action').text() + ")").attr('selected', 'selected');
									
									Q("#on_success_actionDecision").val(Q('#actualCRjobstepsTable').find('#' + id + "").find('#on_success_action').text());
									Q("#on_fail_actionDecision").val(Q('#actualCRjobstepsTable').find('#' + id + "").find('#on_fail_action').text());
									
									
									Q("#dialog4").dialog("open");
								}
								else
								{
								
									Q("#dialog3").dialog("option","title","Failure");
									Q("#dialog3text").text("Please choose the step to edit first.");
									Q("#dialog3").dialog("open");
								
								}
								
							});
							
							

							
							
							Q("#delete").click(function(){
							
								if (Q("input:radio[name=CRjobsteps]", "#actualCRjobstepsTable").is(":checked"))
								{
									CRjobstepActionType = "delete";
									var id = Q("input[name=CRjobsteps]:checked", "#actualCRjobstepsTable").val();
									 
								    //console.log(id);
									Q("#actualCRjobstepsTable").find("#" + id + "").remove();
									Q("#actualCRjobstepsTable").find("." + id + "_for_command_retrieval").remove();
									
									//Q('#' + id + '').remove();
									//Q('.' + id + "_for_command_retrieval").remove();

									var step_id;
									
									
									//Re-sequence
									var i = 1;
									Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
									
										
										Q(this).attr("id", i);
										Q(this).find("#step_id").text(i);
										
										//console.log(Q(this).find("#step_id").text());
										//console.log(Q(this).find("#step_name").text());
										//console.log(Q(this).find("#subsystem").text());
										//console.log(Q(this).find("#command_substring").text());
										//console.log(Q(this).find("#on_success_action").text());
										//console.log(Q(this).find("#on_fail_action").text());

										i = i + 1;
										
										
									});
									
								
									i = 1;
									Q("#actualCRjobstepsTable input[type=radio]").each(function( index ) {

										Q(this).val(i);
										i = i + 1;
										 
									});

									
									i = 1;
									Q("#actualCRjobstepsTable textarea").each(function( index ) {

										Q(this).attr("class", i + "_for_command_retrieval");
										i = i + 1;
										 
									});
									
									
									//Loop through CRjob steps and find the max step_id
									var step_ids = [];
									var last_step_id;

									Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
										step_ids.push(Q(this).find("#step_id").text());
									});
									
									last_step_id = Math.max.apply(Math, step_ids);
									
									
									//console.log(last_step_id);
									
									Q("#actualCRjobstepsTable").find("tr:gt(0)").each(function( index ) {
									
										if (Q(this).find("#step_id").text() == last_step_id)
										{
											
											Q(this).find("#on_success_action").text("quit with success");
											Q(this).find("#on_fail_action").text("quit with failure");
										}
										else
										{
											
											//Q(this).find("#on_success_action").text("goto next step");
										}
										  
									});
								
								
									EnableDisableEditAndDeleteButtons();
									
								}
								else
								{
								
									Q("#dialog3").dialog("option","title","Failure");
									Q("#dialog3text").text("Please choose the step to delete first.");
									Q("#dialog3").dialog("open");
								
								}
								
							});
							
							
							Q("#new").click(function(){
								
								CRjobstepActionType = "new";
								Q("#stepname").val("");
								Q("#SQLscript").val("");
								Q("#on_success_actionDecision").val("");
								Q("#on_fail_actionDecision").val("");
								
								Q("#dialog4").dialog("option","title","New step");
								Q("#dialog4").dialog("open");
							});

							
							
							Q("#parse").click(function(){
								
								//alert(Q("#SQLscript").val());
								//alert(Q("#activeServer").val());
								
								if (Q("#SQLscript").val())
								{
									Q("#overlay3").show();
									Q("#loader2").show();
									
									//Connecting directly to SQL server by passing SQL query to parse
									var response3 = "";
									EnvDashViewProxy.parseSQLquery(Q("#SQLscript").val(),Q("#activeServer").val(),function(t) {
										 response3 = t.responseObject();
										 if (response3.indexOf("failed") == -1)
										 {
											Q("#loader2").hide();
											Q("#overlay3").hide();
											
											//parsing succeeded
											Q("#dialog3").dialog("option","title","Success");
											Q("#dialog3text").text(response3);
											Q("#dialog3").dialog("open");
										 
										 }
										 else
										 {
										 
											Q("#loader2").hide();
											Q("#overlay3").hide();
										 
											Q("#dialog3").dialog("option","title","Failure");
											Q("#dialog3text").text(response3);
											Q("#dialog3").dialog("open");
										 
										 }
										 
									});
								}
								else
								{
									Q("#dialog3").dialog("option","title","Failure");
									Q("#dialog3text").text("Please provide SQL query/script to parse");
									Q("#dialog3").dialog("open");
								
								}
								
								
							});
							
							
							
							
							Q("#properties").click(function(){
								
								
								//alert("properties button was clicked");
								//Q("#dialog3").dialog("option","title","Debug");
								//Q("#dialog3text").text("properties button was clicked");
								//Q("#dialog3").dialog("open");
								
								//Retrieve CR job steps
								
								Q("#overlay3").show();
								Q("#loader2").show();
								
								var response2 = "";
								EnvDashViewProxy.getCRjobStepsSQLquery(CRjob,Q("#clientAcronym").val(),Q("#environment").val(), function(t) {
									 response2 = t.responseObject();
									 
									
									 if (response2.indexOf("failedAtgetCRjobStepsSQLquery") == -1)
									 {
										/*
										Q("#dialog3").dialog("option","title","Debug");
										Q("#dialog3text").text(response2);
										Q("#dialog3").dialog("open");
										*/
										
										 var stepsjobject = JSON.parse(response2);
										 //alert(stepsjobject);
										 
										 
										 //alert(response2);
										 //alert("About to populate the table...");
										 
										 //Initialize
										 //Q("#actualCRjobinfoTable tr").remove();
										 //Q("#actualCRjobstepsTable tr").remove();
										 										 
										 Q("#actualCRjobinfoTable").find("tr:gt(0)").remove();
										 Q("#actualCRjobstepsTable").find("tr:gt(0)").remove();
										 
										 Q("#actualCRjobstepsTable textarea").remove();
										 
										 
										 
										var CRjobExistence = false;
										var CRjobIdleStatus = false;
										 
										 Q.each(stepsjobject.info, function(index, element){
										 
										 
											//console.log(element.name);
											if (element.name == "exists")
											{
												CRjobExistence = true;
												
												
												//alert(element.start_step_id); 
												//alert(element.date_modified); 
												//alert(element.last_run_date); 
												//alert(element.last_run_time); 
												//alert(element.last_run_outcome); 
												//alert(element.current_execution_status); 
												//alert(element.current_execution_step); 
												
												//console.log(element.current_execution_status);
												if (element.current_execution_status == "Idle")
												{
													 CRjobIdleStatus = true;
													 Q("#actualCRjobinfoTable").append('<tr>' +
																						 '<td style="width: 8%;text-align:center">' + element.start_step_id + '</td>' +
																						 '<td style="width: 8%;text-align:center">' + element.date_modified + '</td>' +
																						 '<td style="width: 8%;text-align:center">' + element.last_run_date + '</td>' +
																						 '<td style="width: 8%;text-align:center">' + element.last_run_time + '</td>' +
																						 '<td style="width: 8%;text-align:center">' + element.last_run_outcome + '</td>' +
																						 '<td style="width: 8%;text-align:center">' + element.current_execution_status + '</td>' +
																						 '<td style="width: 8%;text-align:center">' + element.current_execution_step + '</td>' +
																					   '</tr>');
													 
													 //Q("#activeDB").val(element.activeDB);
													 //Q("#activeServer").val(element.activeServer);
												 }
												 else
												 {
													Q("#loader2").hide();
													Q("#overlay3").hide();
													
												 	Q("#dialog3").dialog("option","title","Error");
													Q("#dialog3text").text(CRjob + " is not idle at the moment");
													Q("#dialog3").dialog("open");
												 
												 }


											}
											else
											{
												Q("#loader2").hide();
												Q("#overlay3").hide();
											
												Q("#dialog3").dialog("option","title","Error");
												Q("#dialog3text").text(CRjob + " does not exist");
												Q("#dialog3").dialog("open");	
											
											}
											
											
											
											 
										 });
										 
										 
										 if (CRjobIdleStatus)
										 {
											
										 
											 Q.each(stepsjobject.steps, function(index, element){
												//alert(element.step_id); 
												//alert(element.step_name); 
												//alert(element.on_fail_action); 
												
												 Q("#actualCRjobstepsTable").append('<tr id="' + element.step_id + '">' +
																						 '<td id="step_id" style="width: 8%;text-align:center">' + element.step_id + '</td>' +
																						 '<td id="step_name" style="width: 8%;text-align:center">' + element.step_name + '</td>' +
																						 '<td id="subsystem" style="width: 8%;text-align:center">' + element.subsystem + '</td>' +
																						 '<td id="command_substring" style="width: 8%;text-align:center">' + element.command.substring(0, 14) + '...</td>' +
																						 //'<td style="width: 8%;text-align:center;visibility:hidden"><textarea class="' + element.step_id + '_for_command_retrieval">' + element.command + '</textarea></td>' +	 
																						 '<td id="on_success_action" style="width: 8%;text-align:center">' + element.on_success_action + '</td>' +
																						 '<td id="on_fail_action" style="width: 8%;text-align:center">' + element.on_fail_action + '</td>' +
																						 '<td id="radioButton" style="width: 8%;text-align:center"><input type="radio" name="CRjobsteps" value="' + element.step_id + '"></input></td>' +
																						 
																						 //'<td>EditButton</td>' +
																						 //'<td style="width: 8%;text-align:center"><input type="button" id="edit" value="edit"></input></td>' +
																					 '</tr>');
												 
												 Q("#actualCRjobstepsTable").append('<textarea style="display:none;" class="' + element.step_id + '_for_command_retrieval">' + element.command + '</textarea>');	 
												 
											 });
											 
											 
											 //console.log(Q("#actualCRjobstepsTable tr").length);
											EnableDisableEditAndDeleteButtons();
											
											propertiesButtonClicked = true;
											 
											//alert("Finished populating the table");
											 
											 //Present CR job details
											 Q("#loader2").hide();
											 Q("#overlay3").hide();
											 
											 Q("#dialog2").dialog("open");
											 //Q("#CRjobsteps").show();
											 Q("#CRjobinfoTable, #CRjobstepsTable").show();
											 

										 }

										 
										 

										 
										
									 }
									 else
									 {
										Q("#loader2").hide();
										Q("#overlay3").hide();
										
										Q("#dialog3").dialog("option","title","Error");
										Q("#dialog3text").text(response2);
										Q("#dialog3").dialog("open");
									 }
									 
									 
								});
								
							});
							
							
							Q("#ClientRevisionDecision").change(CheckClientRevisionDecision);
							Q("#EnvDecision").change(CheckEnvDecision);
							Q("#WebBinderyFrontEndDecision").change(CheckWebBinderyFrontEndDecision);
							
							Q("#startcrjob").change(function(){
								if(this.checked) 
								{
									Q("#prd-env-cr-job").show();
								}
								else
								{
									Q("#prd-env-cr-job").hide();
								}
								
							});
							
							
							Q("#startnj").change(function(){
								if(this.checked) 
								{
									Q("#prd-env").show();
								}
								else
								{
									Q("#prd-env, #njstartstepSection").hide();
								}
								
							});
							
							
							Q("#schedActivity").change(function(){
								if(this.checked) 
								{
									Q("#kickoffDateTimeSection").show();
									Q("#datetimepicker").val("");
								}
								else
								{
									Q("#kickoffDateTimeSection").hide();
								}
								
							});
							
							Q("#njStartStepDecision").change(ChecknjStartStepDecision);
							
							
							Q("#datetimepicker").datetimepicker({
							    lang: 'en-US',
								format: 'm/d/Y H:i',
								step: 30
							});
							
							
							Q("input[name=clientBuilds]").change(function(){
								
								if(prevBuildForFoundSHA)
								{
									Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").html('TBD');
								}
								
								if(refreshIntervalId)
								{
									clearInterval(refreshIntervalId);
									Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").css('visibility', 'visible');
								}
								
								prevBuildForFoundSHA = Q("input[name=clientBuilds]").filter(":checked").prop('id');
								
								
								Q("#customErrorPlacement").text("")
								
								var clientBuildXML = "/" + Q("input[name=clientBuilds]").filter(":checked").val() + "api/xml?xpath=/freeStyleBuild/action/lastBuiltRevision/SHA1";
								
								//alert(clientBuildXML);
								
								
								Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html('searching for SHA value...');
								
								//start blinking indicating the search is happening								
								var flashSearch = Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement");
								refreshIntervalId = setInterval(function(){
									if (flashSearch.css('visibility') == 'hidden') 
									{
										flashSearch.css('visibility', 'visible');
									}
									else 
									{
										flashSearch.css('visibility', 'hidden');
									}    
								}, 500);
								
								
								//Get the corresponding SHA value for client build
								Q.get(clientBuildXML, updateTable)
									//.done(success)
									.fail(failure);
									//.always(always);
								
								
							});
							
							
							
							Q("#showHideCBS").click(function(){
								
								
								if (Q('#' + Q("#clientAcronym").val() + "_clientVersions").is(":hidden"))
								{
									Q('#' + Q("#clientAcronym").val() + "_clientVersions").show(500);
								}
								else
								{
									Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide(500);
								}
									
							});
							
							
							//Check if user is authorized to initiate PRD deployments or update PRD CR jobs
							var response = "";
							EnvDashViewProxy.checkIfUserIsInJenkinsPRDgroup(function(t) {
								 response = t.responseObject();
								 
								 if (response.indexOf("failed") == -1)
								 {
									authorizedForPRDactions = response;
									//alert(authorizedForPRDactions);
									
									/*
									Q("#dialog3").dialog("option","title","Debug");
									Q("#dialog3text").text(authorizedForPRDactions);
									Q("#dialog3").dialog("open");
									*/
								 }
								 else
								 {
									//alert(response);
									Q("#dialog3").dialog("option","title","Error");
									Q("#dialog3text").text(response);
									Q("#dialog3").dialog("open");
								 }
							});
							
							
						});
					
					
						function EnableDisableEditAndDeleteButtons()
						{
							if (Q("#actualCRjobstepsTable tr").length > 1)
							{
								Q("#edit").prop('disabled',false).css('opacity','');
								Q("#delete").prop('disabled',false).css('opacity','');

							}
							else
							{

								Q("#edit").prop('disabled',true).css('opacity',0.5);
								Q("#delete").prop('disabled',true).css('opacity',0.5);

							}
						}
						
						
						function getClientJobNextRunDateTime(jobDetails, servertime)
						{
							
							//console.log("At getClientJobNextRunDateTime");
							//console.log("Processing " + jobDetails.job);							
							//console.log(jobDetails.next_run_schedule_id);
							//console.log(jobDetails.next_run_date);
							//console.log(jobDetails.next_run_time);
							//console.log("The retrieved NJ next run date and time from client server is " + jobDetails.next_run_date_time);
							
							var NJ = jobDetails.job;
							var NextRunScheduleID = jobDetails.next_run_schedule_id;
							var NextRunDate = jobDetails.next_run_date;
							var NextRunTime = jobDetails.next_run_time;
							var NextRunDateTimeForConv = jobDetails.next_run_date_time;
						
						    var validTime;
							
							if (NextRunScheduleID != 0 &amp;&amp; NextRunDate != 0)
							{
								validTime = true;
							}
							else
							{ 
								validTime = false;
								//console.log("It looks like the " + NJ + " is not scheduled to run");
							}


							if (validTime)
							{

								//remove EDT or EST keyword
								var NextRunDateTime = new Date(NextRunDateTimeForConv.replace('EDT','').replace('EST',''));
								//console.log("The built NextRunDateTime on a client side or browser is " + NextRunDateTime);
								
							   if (servertime &gt; NextRunDateTime)
							   {
									//console.log("It looks like " + NJ + " was disabled for at least a day. Will hypothetically bring its next run date and time into the future assuming it runs daily.");
									while (servertime &gt; NextRunDateTime)
									{
										NextRunDateTime.setDate(NextRunDateTime.getDate() + 1);
									}

							   }
							   
							   //console.log("Next " + NJ + " date and time to run is " + NextRunDateTime);
							   //console.log("Current server date and time is " + servertime);

								return NextRunDateTime;
							}
							else
							{
							
								return false;
							}

						
						}
						
						
						
						
						
						
						function CloseResetDynamicDialog(typeOfAction)
						{
						
							//Reset values and selections of html elements
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html('TBD');
							Q("#dialog").trigger("reset");
							validationObj.resetForm();
							
							if (typeOfAction == "close")
							{
								Q("#overlay, #dialog, #ClientRevisionSection, #non-dev-env, #PRDsection, #prd-env, #njstartstepSection, #envSection, #prd-env-cr-job, #kickoffDateTimeSection, #schedActivitySection, #optional-web-bindery-frontend, #binderyfrontend-versions, #current-bindery-frontend-version").hide();
								Q("#buildNumber").val("");
								Q("#core_version").val("");
								Q("#build_num").val("");
								Q("#datetimepicker").val("");
								Q("#web_version").val("");
								Q("#webVersion").val("");
								Q("#binderyFrontendVersion").val("");
								
								Q("#startCRjobSection").show();
								Q("#startnj").show();
								Q("#startnjlabel").show();
								Q("#noRollbackSection").show();
								Q("#runQASQLscriptSection").show();

							}
							else
							{
								
								
								
								Q("#ClientRevisionSection, #njstartstepSection, #prd-env").hide();
								
								//if web upgrade only
								if(Q("#WebBinderyFrontEndDecision").is(":visible"))
								{
									Q("#binderyfrontend-versions").hide();
								}
								
								
								if (Q("#environment").val() != 'PRD')
								{
									Q("#kickoffDateTimeSection").hide();
								}
								
								
								if (typeofDeployment != "CRjob")
								{
									Q("#prd-env-cr-job").hide();
								}
								
								
								if (typeofDeployment == "backend")
								{
									Q("#buildNumber").val("");
									Q("#build_num").val("");
								
								}
								else
								{
									Q("#core_version").val("");
								}
								
								if (typeofDeployment != "web")
								{
									Q("#web_version").val("");
									Q("#webVersion").val("");
									Q("#binderyFrontendVersion").val("");
								}
								
								if(Q("#envSection").is(":visible"))
								{
									Q("#PRDsection").hide(500);
									Q("#startCRjobSection, #noRollbackSection, #runQASQLscriptSection").hide();
									Q("#kickoffDateTimeSection").hide();
								}
								
							}
							
							Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide();
							Q("#customErrorPlacement").text("");
							Q("#ClientRevision").val("");
							
							propertiesButtonClicked = false;
						
							if(prevBuildForFoundSHA)
							{
								Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").html('TBD');
							}
							
							if(refreshIntervalId)
							{
								clearInterval(refreshIntervalId);
								Q('.' + prevBuildForFoundSHA + "_sha_forReplacement").css('visibility', 'visible');
							}
						
							if (Q("#binderyFrontendVersion").val())
							{
								Q("#web-bindery-frontend").val(Q("#binderyFrontendVersion").val());
							}
						
						}
					
						/*
						function success(msg)
						{
							alert("You May Pass!" + msg); 
						}
						*/
						
						/*
						function success2(msg)
						{
							alert("You May Pass!" + msg); 
						}
						*/
						
						function failure(jqXHR, textStatus, error)
						{ 
							//alert("You May not Pass!" + textStatus); 
							//alert("You May not Pass!" + error); 
							
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html(error);
							
							
							//stop blinking
							clearInterval(refreshIntervalId);
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").css('visibility', 'visible');
						}
						
						
						/*
						function failure2(jqXHR, textStatus, error)
						{ 
							alert("You May not Pass!" + textStatus); 
							alert("You May not Pass!" + error); 
							
						}
						*/
						
						/*
						function always()
						{ 
							alert("Questions Answered."); 
						}
						*/
						
						/*
						function always2()
						{ 
							alert("Questions Answered."); 
						}
						*/
					
						function updateTable(data)
						{
							//alert("Inside updateTable function");
							//Retrieve SHA value for client build
							var sha = Q(data).find("SHA1").text();
							Q("#ClientRevision").val(sha);
							Q("#buildNumber").val(Q("input[name=clientBuilds]").filter(":checked").prop('id'));
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html(sha);
							
							
							//stop blinking
							clearInterval(refreshIntervalId);
							Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").css('visibility', 'visible');
							Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide(500);
						
						}
					
						/*
						function processSuccess(data)
						{
							alert("Inside processSuccess function");
							alert(data);
						
						}
						*/
						
						function showBackendDepDynamicDialog(comp, env, coreVersion) 
						{
							if (authorizedForPRDactions != "TBD")
							{
								var proceed = false;
								if (authorizedForPRDactions == "authorized" &amp;&amp; env == "PRD")
								{
									proceed = true;
								}								
								else if (authorizedForPRDactions == "unauthorized" &amp;&amp; env == "PRD")
								{
									//alert('You are not authorized to access client PRD environments')
									Q("#dialog3").dialog("option","title","Warning");
									Q("#dialog3text").text("You are not authorized to access client PRD environments");
									Q("#dialog3").dialog("open");
								
								}
								else
								{
									proceed = true;
								}
								
								
								if (proceed)
								{
									//alert( "You are running jQuery version: " + Q.fn.jquery );
									//alert(Q().jquery); //it is 1.7.2
									
									typeofDeployment = "backend";
									
									Q("#overlay").show();
									Q("#loader2").show();
									
									 Q("#startnjlabel").text(" Start nightly job upon successful execution of deployment and/or change request job");
									 
									
									 //Set the html elements
									 var compSubstr = comp.substring(0, comp.indexOf(' '))
									 Q("#dialogTitle").text("Backend deploy " + compSubstr + " to " + env + " for " + coreVersion);
									 Q("#dialogTitle").css("background-color", "#81BEF7");
									 Q("#clientAcronym").val(compSubstr);
									 Q("#environment").val(env);
									 Q("#core_version").val(coreVersion);
									 
									 CRjob = compSubstr + "_Change_Request";
									 Q("#cr-job-dep").text(CRjob);
									 //Q("#dialog2Title").text(CRjob);
									 Q("#dialog2").dialog("option","title",CRjob);
									 
									 getNightlyjobSteps();
								 }

								 
							 }
							 else
							 {
								//alert('Cannot proceed due to failing to determine the user level of access')
								Q("#dialog3").dialog("option","title","Warning");
								Q("#dialog3text").text("Cannot proceed due to failing to determine user's level of access");
								Q("#dialog3").dialog("open");
								
							 }
						}
						
						function CheckClientRevisionDecision()
						{
							if (Q("#ClientRevisionDecision").val() == "yes")
							{
								Q("#ClientRevisionSection").show(500);
								Q('#' + Q("#clientAcronym").val() + "_clientVersions").show(500);
							}
							else
							{
								Q("#build_num").val("");
								Q("#ClientRevision").val("");
								Q("#ClientRevisionSection").hide(500);
								Q('#' + Q("#clientAcronym").val() + "_clientVersions").hide(500);
								Q('.' + Q("input[name=clientBuilds]").filter(":checked").prop('id') + "_sha_forReplacement").html('TBD');
								Q("input[name=clientBuilds]").filter(":checked").prop('checked', false);
							}
							
						}
						
						function CheckWebBinderyFrontEndDecision()
						{
							if (Q("#WebBinderyFrontEndDecision").val() == "yes")
							{
								Q("#binderyfrontend-versions").show(500);
							}
							else
							{
								Q("#binderyfrontendVersionDecision").val("");
								Q("#binderyfrontend-versions").hide(500);
							}
							
						}
						
						function CheckEnvDecision()
						{

							if (Q("#EnvDecision").val() != "")
							{
								if (Q("#EnvDecision").val() != "PRD")
								{
									Q("#kickoffDateTimeSection").hide();
									
							    }
								else
								{
									
									Q("#schedActivitySection").hide();
								}
							   
							   
							   Q("#environment").val(Q("#EnvDecision").val());
							   

							   
							   Q("#overlay2").show();
							   Q("#loader2").show();
							   
							   //Q("#noRollbackSection").hide();
							   
							   getNightlyjobSteps();
								
							}
							else
							{
								Q("#PRDsection").hide(500);
								Q("#startCRjobSection, #noRollbackSection, #runQASQLscriptSection").hide();
								Q("#kickoffDateTimeSection").hide();
								Q("#schedActivitySection").hide();
								
							}
							
							
							Q("#datetimepicker").val("");
							Q("#schedActivity").prop('checked', false);
							
						}
						
						function ChecknjStartStepDecision()
						{
							if (Q("#njStartStepDecision").val() == "yes")
							{
								Q("#njstartstepSection").show(500);
							}
							else
							{
								Q("#njstartstepSection").hide(500);
							}
						}
						
						
						function showClientDepDynamicDialog(comp, env, buildNum) 
						{
						
						
							if (authorizedForPRDactions != "TBD")
							{
								var proceed = false;
								if (authorizedForPRDactions == "authorized" &amp;&amp; env == "PRD")
								{
									proceed = true;
								}								
								else if (authorizedForPRDactions == "unauthorized" &amp;&amp; env == "PRD")
								{
									//alert('You are not authorized to access client PRD environments')
									Q("#dialog3").dialog("option","title","Warning");
									Q("#dialog3text").text("You are not authorized to access client PRD environments");
									Q("#dialog3").dialog("open");
								
								}
								else
								{
									proceed = true;
								}
								
								
								if (proceed)
								{
									//alert( "You are running jQuery version: " + Q.fn.jquery );
									//alert(Q().jquery); //it is 1.7.2
									
									typeofDeployment = "client";
									
									Q("#startnjlabel").text(" Start nightly job upon successful execution of deployment and/or change request job");
									
									Q("#clientAcronym").val(comp);
									Q("#build_num").val(buildNum);
								  
									 CRjob = comp + "_Change_Request";
									 Q("#cr-job-dep").text(CRjob);
									 //Q("#dialog2Title").text(CRjob);
									 Q("#dialog2").dialog("option","title",CRjob);
									
									 if (env == null)
									 {
										noInitialEnv = true;
										Q("#overlay, #dialog").show();
										
										 Q("#noRollbackSection").hide();
										 Q("#runQASQLscriptSection").hide();
										 Q("#envSection").show();
										 Q("#dialogTitle").text("Deploying " + comp + " for " + buildNum);
										 Q("#dialogTitle").css("background-color", "#81BEF7");
										 
									 }
									 else
									 {
										Q("#overlay").show();
										Q("#loader2").show();
										 
										 //Set the html elements
										 //Q("#dialogTitle").text("Deploying " + comp + " to " + env + " for " + buildNum);
										 Q("#dialogTitle").css("background-color", "#81BEF7");
										 Q("#environment").val(env);
										 
										 getNightlyjobSteps();
									 }
									 
									
								}

								 
							 }
							 else
							 {
								//alert('Cannot proceed due to failing to determine the user level of access')
								Q("#dialog3").dialog("option","title","Warning");
								Q("#dialog3text").text("Cannot proceed due to failing to determine user's level of access");
								Q("#dialog3").dialog("open");
								
							 }
						
						}
						
						
						function showCRjobDynamicDialog(comp, env) 
						{
						
							if (authorizedForPRDactions != "TBD")
							{
								var proceed = false;
								if (authorizedForPRDactions == "authorized" &amp;&amp; env == "PRD")
								{
									proceed = true;
								}								
								else if (authorizedForPRDactions == "unauthorized" &amp;&amp; env == "PRD")
								{
									//alert('You are not authorized to access client PRD environments')
									Q("#dialog3").dialog("option","title","Warning");
									Q("#dialog3text").text("You are not authorized to access client PRD environments");
									Q("#dialog3").dialog("open");
								
								}
								else
								{
									proceed = true;
								}
								
								
								if (proceed)
								{
									Q("#overlay").show();
									Q("#loader2").show();
									
									//alert( "You are running jQuery version: " + Q.fn.jquery );
									//alert(Q().jquery); //it is 1.7.2
									
									typeofDeployment = "CRjob";

									 Q("#startnjlabel").text(" Start nightly job upon successful execution of change request job");
									 
									 //Set the html elements
									 var compSubstr = comp.substring(0, comp.indexOf(' '));
									//Q("#dialogTitle").text("Change request " + compSubstr + " to " + env);
									Q("#dialogTitle").css("background-color", "#81BEF7");
									Q("#clientAcronym").val(compSubstr);

									CRjob = compSubstr + "_Change_Request";
									Q("#cr-job-dep").text(CRjob);
									//Q("#dialog2Title").text(CRjob);
									Q("#dialog2").dialog("option","title",CRjob);
									 
									Q("#environment").val(env);
									  
									getNightlyjobSteps();
									
								 }

								 
							 }
							 else
							 {
								//alert('Cannot proceed due to failing to determine the user level of access')
								Q("#dialog3").dialog("option","title","Warning");
								Q("#dialog3text").text("Cannot proceed due to failing to determine user's level of access");
								Q("#dialog3").dialog("open");
								
							 }

						
						}
						
						
						function showWebDepDynamicDialog(comp, env, webVersion) 
						{
							if (authorizedForPRDactions != "TBD")
							{
								var proceed = false;
								if (authorizedForPRDactions == "authorized" &amp;&amp; env == "PRD")
								{
									proceed = true;
								}								
								else if (authorizedForPRDactions == "unauthorized" &amp;&amp; env == "PRD")
								{
									//alert('You are not authorized to access client PRD environments')
									Q("#dialog3").dialog("option","title","Warning");
									Q("#dialog3text").text("You are not authorized to access client PRD environments");
									Q("#dialog3").dialog("open");
								
								}
								else
								{
									proceed = true;
								}
								
								
								if (proceed)
								{
									
									typeofDeployment = "web";
									
									Q("#overlay").show();
									Q("#loader2").show();
									
									 
									 //Set the html elements
									 var compSubstr = comp.substring(0, comp.indexOf(' '))
									 Q("#dialogTitle").text("Web deploy " + compSubstr + " to " + env + " for " + webVersion);
									 Q("#dialogTitle").css("background-color", "#d0f781");
									 Q("#clientAcronym").val(compSubstr);
									 Q("#environment").val(env);
									 Q("#web_version").val(webVersion);
									 

									 getWebBinderyFrontEndVersions();
								 }

								 
							 }
							 else
							 {
								//alert('Cannot proceed due to failing to determine the user level of access')
								Q("#dialog3").dialog("option","title","Warning");
								Q("#dialog3text").text("Cannot proceed due to failing to determine user's level of access");
								Q("#dialog3").dialog("open");
								
							 }
						}

						function getWebBinderyFrontEndVersions()
						{
						
							var response7 = "";
							var binderyFrontendExists = false;
							EnvDashViewProxy.getWebBinderyFrontEndVersionsSQLquery(Q("#clientAcronym").val(),Q("#environment").val(), function(t) {
								 response7 = t.responseObject();
								 
								
								 if (response7.indexOf("failed") == -1)
								 {
									/*
									Q("#dialog3").dialog("option","title","Debug");
									Q("#dialog3text").text(response7);
									Q("#dialog3").dialog("open");
									*/
									 
									 var versions = JSON.parse(response7);
									 //console.log(versions);
									 //Get information on the nightly job
									 
								     Q.each(versions.info, function(index, element){
											
										//console.log(element.name);
										Q("#webVersion").val(element.webVersion);
										
										if (element.binderyFrontendVersion != "NA")
										{
											Q("#binderyFrontendVersion").val(element.binderyFrontendVersion);
											binderyFrontendExists = true;
										}
										else
										{
											Q("#binderyFrontendVersion").val("");
										}
										
										Q("#activeServer").val(element.activeServer);
									 });
									 									
									
									Q("#loader2").hide();
									Q("#dialog").show();
									
									
									Q("#PRDsection").show();
									Q("#startCRjobSection").hide();
									Q("#startnj").hide();
									Q("#startnjlabel").hide();
									Q("#noRollbackSection").hide();
									Q("#runQASQLscriptSection").hide();
									Q("#binderyfrontend-versions").hide();
									Q("#current-bindery-frontend-version").hide();
									
									if (typeofDeployment == "web")
									{
										//alert('here show dialog for web deployments');
										
										Q("#datetimepickerLabel").text("Deployment kick off date and time");
										
										
										if (Q("#web_version").val() == "applyPendingChanges")
										{
											Q("#dialogTitle").text("Web deploy (applyPendingChanges) " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " for web " + Q("#webVersion").val() + " &#x2192; " + Q("#activeServer").val());
											Q("#dialogTitle").css("background-color", "#d0f781");
											Q("#optional-web-bindery-frontend").hide();
											
											if (binderyFrontendExists)
											{
												Q("#web-bindery-frontendLabel").text("Bindery frontend version currently deployed");
												Q("#web-bindery-frontend").val(Q("#binderyFrontendVersion").val());
												Q("#current-bindery-frontend-version").show();
											}

										}
										else if (Q("#web_version").val() == "binderyFrontendSubDeploy")
										{
											if (binderyFrontendExists)
											{
												
												Q("#dialogTitle").text("Web deploy (binderyFrontendSubDeploy) " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " for web " + Q("#webVersion").val() + " &#x2192; " + Q("#activeServer").val());
												Q("#dialogTitle").css("background-color", "#d0f781");
												Q("#web-bindery-frontendLabel").text("Bindery frontend version currently deployed");
												Q("#web-bindery-frontend").val(Q("#binderyFrontendVersion").val());
												Q("#current-bindery-frontend-version").show();
												Q("#binderyfrontend-versions").show();
												
											}
											else
											{
												Q("#optional-web-bindery-frontend").hide();
												
												Q("#overlay").hide();
												Q("#dialog").hide();
												
												Q("#dialog3").dialog("option","title","Error");
												Q("#dialog3text").text("This client's environment doesn't have bindery frontend deployed");
												Q("#dialog3").dialog("open");
											}
										
										}
										else
										{
										
											var splitString = Q("#webVersion").val().toLowerCase().replace('v', '').split(".");
											var currentVersion = parseInt(splitString[0], 10);

											splitString = Q("#web_version").val().toLowerCase().replace('v', '').split(".");
											var futureVersion = parseInt(splitString[0], 10);

											if (currentVersion == futureVersion)
											{
											
												Q("#webVersion").val(Q("#web_version").val());
												Q("#dialogTitle").text("Web deploy " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " for web " + Q("#webVersion").val() + " &#x2192; " + Q("#activeServer").val());
												Q("#dialogTitle").css("background-color", "#d0f781");
												
												if (binderyFrontendExists)
												{
													
													Q("#WebBinderyFrontEndLabelQuestion").text(" Do you want to also upgrade bindery frontend as part of this web deployment");
													Q("#web-bindery-frontendLabel").text("Bindery frontend version currently deployed");
													Q("#web-bindery-frontend").val(Q("#binderyFrontendVersion").val());
													Q("#current-bindery-frontend-version").show();
													Q("#optional-web-bindery-frontend").show();
												}
												else
												{
													Q("#optional-web-bindery-frontend").hide();
												}
											
											}
											else
											{
											
												Q("#optional-web-bindery-frontend").hide();
												
												Q("#overlay").hide();
												Q("#dialog").hide();
												
												Q("#dialog3").dialog("option","title","Error");
												Q("#dialog3text").text("Please reach out to DevOps Team for a major upgrade");
												Q("#dialog3").dialog("open");
											
											}
										
										}
										
									}
									else
									{
									
										//for bindery frontend deployment
										
									
									}

									
									if (Q("#environment").val() == "PRD") 
									{		
										Q("#kickoffDateTimeSection").show();
									}
									else
									{
										Q("#schedActivitySection").show();
									}
									
									
								 }
								 else
								 {
									Q("#loader2").hide();
									Q("#overlay").hide();
									
									
									Q("#dialog3").dialog("option","title","Error");
									Q("#dialog3text").text(response7);
									Q("#dialog3").dialog("open");
								 }
								 
								 
							});
						
						
						}
						
						function getNightlyjobSteps()
						{
						
							//Get the steps
							var response6 = "";
							EnvDashViewProxy.getNightlyjobStepsSQLquery(Q("#clientAcronym").val(),Q("#environment").val(), function(t) {
								 response6 = t.responseObject();
								 
								
								 if (response6.indexOf("failed") == -1)
								 {
									/*
									Q("#dialog3").dialog("option","title","Debug");
									Q("#dialog3text").text(response6);
									Q("#dialog3").dialog("open");
									*/
									 
									 var stepsjobject2 = JSON.parse(response6);
									 //console.log(stepsjobject2);
									 
									 
									 
									 //Get information on the nightly job
									 
									 
								     Q.each(stepsjobject2.info, function(index, element){
										
										
										//console.log(element.name);
									    if (element.name == "exists")
										{
											NJexistence = true;
											//console.log(element.job); 
											//console.log(element.next_run_schedule_id); 
											//console.log(element.next_run_date); 
											//console.log(element.next_run_time);
											
											
											NJdetails = {
											  job: element.job,
											  next_run_schedule_id: element.next_run_schedule_id,
											  next_run_date: element.next_run_date,
											  next_run_time: element.next_run_time,
											  next_run_date_time: element.next_run_date_time
											};
											
											//console.log(NJdetails.job);
											//console.log(NJdetails.next_run_schedule_id);
											//console.log(NJdetails.next_run_date);
											//console.log(NJdetails.next_run_time);
											//console.log(NJdetails.next_run_date_time);
										}
										
										Q("#activeDB").val(element.activeDB);
										Q("#activeServer").val(element.activeServer);
										
										
										/*
										 element.next_run_schedule_id
										 element.next_run_date
										 element.next_run_time
										 element.enabledStatus
										 element.current_execution_status
										 element.job
										 element.activeDB
										 element.activeServer
										 */
										 
										 
										 
									 });
									 
									 
									 if (NJexistence)
									 {	 
										 
										 //console.log(response6);
										 //console.log("About to populate the array...");
										 
										 //Initialize
										 Q("#njstartstep").val("");
										 var availableNJsteps = [];
										 
										 Q.each(stepsjobject2.steps, function(index, element){
											//console.log(element.step_id); 
											//console.log(element.step_name); 
										 
											 availableNJsteps.push(element.step_name);
											 
										 });
										 
										//console.log("Finished populating the array");
										//console.log(availableNJsteps);
										 
										Q("#njstartstep").autocomplete({
										  source: availableNJsteps,
										  minLength: 0
										}); 
										
										
										Q("#njstartstep").focus(function (){
										  Q("#njstartstep").autocomplete( "search", "" );
										});
										
										 
										 //Get information on the nightly job start
										 Q.each(stepsjobject2.infoStart, function(index, element){
										 
											//console.log(element.name);
											if (element.name == "exists")
											{
												NJStartExistence = true;
												//console.log(element.job); 
												//console.log(element.next_run_schedule_id); 
												//console.log(element.next_run_date); 
												//console.log(element.next_run_time);
												
												NJStartdetails = {
												  job: element.job,
												  next_run_schedule_id: element.next_run_schedule_id,
												  next_run_date: element.next_run_date,
												  next_run_time: element.next_run_time,
												  next_run_date_time: element.next_run_date_time
												};
												
												//console.log(NJStartdetails.job);
												//console.log(NJStartdetails.next_run_schedule_id);
												//console.log(NJStartdetails.next_run_date);
												//console.log(NJStartdetails.next_run_time);
												//console.log(NJStartdetails.next_run_date_time);
											}
											
											
											
											/*
											 element.next_run_schedule_id
											 element.next_run_date
											 element.next_run_time
											 element.enabledStatus
											 element.current_execution_status
											 element.job
											 element.activeDB
											 element.activeServer
											 */
											 
											 
											 
										 });
									  }
									
									
									
									Q("#loader2").hide();
									Q("#dialog").show();
									
									if (noInitialEnv)
									{
										Q("#overlay2").hide();
										Q("#PRDsection").show(500);
									}
									else
									{
										Q("#dialogTitle").text("Deploying " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " for " + Q("#build_num").val() + " &#x2192; " + Q("#activeServer").val());
										Q("#dialogTitle").css("background-color", "#81BEF7");
										Q("#PRDsection").show();
									}
									
									if (typeofDeployment == "CRjob")
									{
										Q("#dialogTitle").text("Change request " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " &#x2192; " + Q("#activeServer").val());
										Q("#dialogTitle").css("background-color", "#81BEF7");

										Q("#startCRjobSection, #noRollbackSection, #runQASQLscriptSection").hide();
										Q("#prd-env-cr-job").show();
										Q("#datetimepickerLabel").text("Change Request job kick off date and time");

									}
									else if (typeofDeployment == "client" || typeofDeployment == "backend")
									{
										Q("#startCRjobSection, #noRollbackSection").show();
										
										
										Q("#datetimepickerLabel").text("Deployment kick off date and time");
										
										if (typeofDeployment == "backend")
										{
											Q("#dialogTitle").text("Backend deploy " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " for " + Q("#core_version").val() + " &#x2192; " + Q("#activeServer").val());
											Q("#dialogTitle").css("background-color", "#81BEF7");
											
											if (Q("#environment").val() != "DEV")
											{
												Q("#non-dev-env").show();

											}
											
											Q("#runQASQLscriptSection").show();
										}
										else
										{
											Q("#dialogTitle").text("Deploying " + Q("#clientAcronym").val() + " to " + Q("#environment").val() + " for " + Q("#build_num").val() + " &#x2192; " + Q("#activeServer").val());
											Q("#dialogTitle").css("background-color", "#81BEF7");
											
											Q("#runQASQLscriptSection").hide();
										}
										
									}

									
									if (Q("#environment").val() == "PRD") 
									{		
										Q("#kickoffDateTimeSection").show();
									}
									else
									{
										Q("#schedActivitySection").show();
									}
									
									
								 }
								 else
								 {
									Q("#loader2").hide();
									
									
									if (noInitialEnv)
									{
										Q("#overlay2").hide();
										
									}
									else
									{
										Q("#overlay").hide();
									}
									
									Q("#dialog3").dialog("option","title","Error");
									Q("#dialog3text").text(response6);
									Q("#dialog3").dialog("open");
								 }
								 
								 
							});
	
						
						}
						
						
						function startDeployment(type, comp, env, version, binderyVersion)
						{
							var xmlHttp = new XMLHttpRequest();
							var baseUrl;
							var windowName = "AnalyticsBuildsDeployments";
							var windowObjectReference = null;
							
							if (type == "client")
							{
								baseUrl = "/job/Client_Deploy";
								
							}
							else if (type == "backend")
							{
								baseUrl = "/job/Backend_Deploy";
							}
							else if (type == "CRjob")
							{
								baseUrl = "/job/CR_Job";
							
							}
							else if (type == "web")
							{
								baseUrl = "/job/qdwWebDockerDeployClientEnvironment";
							
							}
							
							var buildUrl = "";							
							var DoNotPerformRollback;
							var StartCRjob;
							var StartNJ;
							var nightly_job_start_step;
							
							//Prepare switches and parameters for passing to Jenkins
							
							
							if (type == "web")
							{
							
								//Set appropriate git branch for the chosen web version
								
								var options = {zeroExtend: true};
								var branch;
								
								var cleanedVersion = version;
								var parsedShortWebVersion = (cleanedVersion.replace('v','').split(".")[0] + "." + cleanedVersion.replace('v','').split(".")[1] + "." + cleanedVersion.replace('v','').split(".")[2]).replace('undefined',0);
								
								if (versionCompare(parsedShortWebVersion, "5.2.6", options) &lt; 0)
								{
									branch = "deploy";
								}
								else if (versionCompare(parsedShortWebVersion, "5.3", options) &lt; 0 &amp;&amp; (versionCompare(parsedShortWebVersion, "5.2.6", options) &gt; 0 || versionCompare(parsedShortWebVersion, "5.2.6", options) === 0))
								{
									branch = "deploy-5.2";
								}
								else if (versionCompare(parsedShortWebVersion, "6.0", options) &lt; 0 &amp;&amp; (versionCompare(parsedShortWebVersion, "5.3.0", options) &gt; 0 || versionCompare(parsedShortWebVersion, "5.3.0", options) === 0))
								{
									branch = "deploy-5.3";
								}
								else if (versionCompare(parsedShortWebVersion, "6.0.0", options) &gt; 0 || versionCompare(parsedShortWebVersion, "6.0.0", options) === 0)
								{
									branch = "deploy-6.0";
								}
								else
								{
									//this web version has not qualified for any branch
									branch = "nonExistentBranch";
									
									Q("#dialog3").dialog("option","title","Error");
									Q("#dialog3text").text("Something is not right with this web " + version + " version because deployment branch could not be determined. Cannot proceed with this web deployment");
									Q("#dialog3").dialog("open");
									
									return false;
								}


								//alert(branch);
								//return false;
								
								
								buildUrl = baseUrl + "/buildWithParameters?" +
												"gitBranch=" + branch +
												"&amp;client=" + comp + 
												"&amp;environment=" + env + 
												"&amp;tag=" + version +
												"&amp;binderyTag=" + binderyVersion +
												"&amp;JiraTicket=" + Q("#jiraticket").val().trim().replace(/['"]+/g, '') +
												"&amp;delay=" + Number(Q("#secondsToWait").val()) + "sec";
							
							}
							else
							{
								if(Q("#norollback").is(":checked")){DoNotPerformRollback="-no_rollback";}else{DoNotPerformRollback="";}
								if(Q("#runqascript").is(":checked")){ExecuteQAscript="-run_qa_script";}else{ExecuteQAscript="";}
								if(Q("#startcrjob").is(":checked")){StartCRjob="-start_cr_job";}else{StartCRjob="";}
								if(Q("#startnj").is(":checked")){StartNJ="-start_nightly_job";}else{StartNJ="";}
								if(!Q("#njstartstep").val().trim()){nightly_job_start_step="NA";}else{nightly_job_start_step=Q("#njstartstep").val().trim().replace(/['"]+/g, '');}
								
								
								buildUrl = baseUrl + "/buildWithParameters?" +
											"Client=" + comp + 
											"&amp;Env=" + env + 
											"&amp;StartNJ=" + StartNJ +
											"&amp;NJstartStep=" + nightly_job_start_step +
											"&amp;JiraTicket=" + Q("#jiraticket").val().trim().replace(/['"]+/g, '') +
											"&amp;delay=" + Number(Q("#secondsToWait").val()) + "sec";
								
								if (type == "client" || type == "backend")
								{
								
									buildUrl = buildUrl + 
												"&amp;NoRollback=" + DoNotPerformRollback +
												"&amp;StartCRjob=" + StartCRjob;
								
									if (type == "client")
									{
										buildUrl = buildUrl + 
												"&amp;SourceBuildID=" + version;
										
									}
									else
									{
										buildUrl = buildUrl +
												"&amp;CoreVersion=" + version +
												"&amp;ClientRevision=" + Q("#ClientRevision").val().trim() +
												"&amp;RunQAScript=" + ExecuteQAscript;
									}
								}	
							}
							
							//debug the URL
							/*
							var str = buildUrl;
							splitString = str.split("&amp;");
							var parsedBuildUrl = "";

							splitString.forEach(function(item) {
							  parsedBuildUrl += item + '\n';
							});

							console.log(parsedBuildUrl);
							*/
							
							
							CloseResetDynamicDialog("close");
							xmlHttp.open("POST", buildUrl, true); // true for asynchronous 
							xmlHttp.send(null);
							
							//Keep the same tab/window for showing the newly initiated deployments
							//alert(window.name);
							
							if (window.name == windowName)
							{
								window.open(baseUrl);
							}
							else
							{
								windowObjectReference = window.open(baseUrl,windowName);
								windowObjectReference.focus();
							}
							
							Q("#startDashboard").hide();
							Q("#loader").show();
							window.location.reload(true);
							
						}
						
						
						
						function reloadPage()
						{
							location.reload(true);
						}

						function filterTable() {
						  var input, filter, table, tr, td, i, hd, htmlElementNode;
						  input = document.getElementById("searchInput");
						  filter = input.value.toUpperCase();
						  table = document.getElementById("envDashboard");
						  tr = table.rows;
						  for (i = 0; i &lt; tr.length; i++) {
						    td = tr[i].getElementsByTagName("td")[0];
						    th = tr[i].getElementsByTagName("th")[0];


						    if (td &amp;&amp; !th) {
						      if (td.innerHTML.toUpperCase().indexOf(filter) &gt; -1) {
						        tr[i].style.display = "";
						      } else {
						        tr[i].style.display = "none";
						      }
						    }       
						  }
						}
						
						
						
						function toggle(showHideDiv) {
							hideAll()
							var ele = document.getElementById(showHideDiv);
							if(ele.style.display == "block") {
								ele.style.display = "none";
							}
							else {
								ele.style.display = "block";
							}
						}

						function hideAll() {
							Q(".overlay, .popup, .dropdown").fadeToggle();
							var divs = document.getElementsByTagName("div");
							var tableDivs = new Array();
							for (var i = 0; i &lt; divs.length; i++) {
								if (divs[i].id.match("_History") != null || divs[i].id.match("_Popup") || divs[i].id.match("pop")) {
									tableDivs.push(divs[i]);
								}
							}

							var envs = tableDivs.length;
							for (i = 0; i &lt; envs; i++) {
								var ele = tableDivs[i];
								if(ele.style.display == "block") {
									ele.style.display = "none";
								}
							}

						}
						
						//source: https://gist.github.com/TheDistantSea/8021359#file-version_compare-js
						function versionCompare(v1, v2, options) {
							var lexicographical = options &amp;&amp; options.lexicographical,
								zeroExtend = options &amp;&amp; options.zeroExtend,
								v1parts = v1.split('.'),
								v2parts = v2.split('.');

							function isValidPart(x) {
								return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
							}

							if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
								return NaN;
							}

							if (zeroExtend) {
								
								//console.log('zeroExtend flag was passed');
								while (v1parts.length &lt; v2parts.length) v1parts.push("0");
								while (v2parts.length &lt; v1parts.length) v2parts.push("0");
							}

							if (!lexicographical) {
								v1parts = v1parts.map(Number);
								v2parts = v2parts.map(Number);
							}

							for (var i = 0; i &lt; v1parts.length; ++i) {
								if (v2parts.length == i) {
									return 1;
								}

								if (v1parts[i] == v2parts[i]) {
									continue;
								}
								else if (v1parts[i] &gt; v2parts[i]) {
									return 1;
								}
								else {
									return -1;
								}
							}

							if (v1parts.length != v2parts.length) {
								return -1;
							}

							return 0;
						}
						
					</script>
				</j:case>
			</j:switch>
		</tbody>
	</table>
</div>
<div id="overlay" style="display:none;"></div>
<div id="overlay2" style="display:none;"></div>
<div id="overlay3" style="display:none;"></div>
<form id="dialog" style="display:none;" autocomplete="off">
	<p id="dialogTitle">Placeholder for Deployment Information</p>

	<label id="jiraticketLabel">Jira Ticket (e.g., ACM-123)</label>	<div class="divider"/><input id="jiraticket" type="text"/><br></br>
	<label id="jiraticketDescriptionLabel">Used for automatic ticket update</label>
	
	<br></br><br></br>
	
	<div id="envSection" style="text-align: left"> 
		<label id="EnvLabelQuestion">Please choose client's environment to deploy to</label><div class="divider"/>
		<select id="EnvDecision" name="EnvDecision">
			<option value="">Choose...</option>
			<option value="DEV">DEV</option>
			<option value="QA">QA</option>
			<option value="UAT">UAT</option>
			<option value="PRD">PRD</option>
		</select>
	</div>
	
	
	<div id="non-dev-env" style="text-align: left"> 
		<label id="ClientRevisionLabelQuestion">Do you want to provide specific client revision with this backend deployment?</label><div class="divider"/>
		<select id="ClientRevisionDecision" name="ClientRevisionDecision">
			<option value="">Choose...</option>
			<option value="no">No</option>
			<option value="yes">Yes</option>
		</select>
	</div>
	
	 <div id="current-bindery-frontend-version" style="text-align: left">
		<label id="web-bindery-frontendLabel">Placeholder for whether to specify web version or bindery frontend version</label>
		<div class="divider"/><input type="text" id="web-bindery-frontend" name="web-bindery-frontend" readonly="readonly"/><br></br>
	</div>
	
    <div id="optional-web-bindery-frontend" style="text-align: left"> 
		<label id="WebBinderyFrontEndLabelQuestion">Placeholder for whether to specify web version or bindery frontend version</label><div class="divider"/>
		<select id="WebBinderyFrontEndDecision" name="WebBinderyFrontEndDecision">
			<option value="">Choose...</option>
			<option value="no">No</option>
			<option value="yes">Yes</option>
		</select>
	</div>
	
	<!-- dropdown menu for bindery versions-->
	<j:set var="binderytags" value="${it.getOrderOfWebOrBinderyFrontTags('bindery')}"/>
	<div id="binderyfrontend-versions" style="text-align: left">
		<label id="binderyfrontendVersionRequest">Please select bindery frontend version to deploy</label><div class="divider"/>
		<select id="binderyfrontendVersionDecision" name="binderyfrontendVersionDecision">
					<option value="">Choose...</option>
			<code>
				<j:forEach items="${binderytags}" var="binderytag">
					<option value="${binderytag}">${binderytag}</option>
				</j:forEach>
			</code>	
		</select>
	</div>

	
	<div id="ClientRevisionSection">
		<label id="ClientRevisionLabel">Selected client build</label>
		<div class="divider"/><input type="text" id="buildNumber" name="buildNumber" readonly="readonly"/><br></br>
		<label id="ClientRevisionLabel">Selected client revision</label>
		<div class="divider"/><input type="text" id="ClientRevision" name="ClientRevision" readonly="readonly"/><br></br>
		<button type="button" id="showHideCBS">Show/Hide client builds</button><br></br>
		<!-- Show history of last client builds  -->
		<j:forEach items="${orderOfComps}" var="comp">
			<div id="${comp}_clientVersions" style="display: none; height:200px; overflow: auto;">
				<label id="requestforSHA">Please select the stable build (client version) to deploy after core upgrade during backend deployment     </label>
				<span id="customErrorPlacement" style="color:red; font-weight:bold"></span><br></br>
				<table style="width=100%;" class="table table-bordered table-striped table-condensed hoverable-table-in-dialog">
					<tbody>
						<th style="width: 8%;text-align:center">Build</th>
						<th style="width: 8%;text-align:center">SHA</th>
						<th style="text-align:center">Time</th>
						<th style="width:8%;text-align:center">Status</th>
					</tbody>
					<j:forEach items="${it.getDeploymentsByCompEnv(comp, 'Last Commit', limitDeploy)}" var="deployment">
					<tr>
						<td>
							<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${deployment.get('buildNum')}</a>
						</td>
						<td>
							<span class="${deployment.get('buildNum')}_sha_forReplacement">TBD</span>
						</td>
						<td>
							<a title="View Deployment" href="${deployment.get('jobUrl')}" target="AnalyticsBuildsDeployments">${it.getNiceTimeStamp(deployment.get('created_at'))}</a>
						</td>
						<td>
							<j:switch on="${deployment.get('buildstatus')}">
								<j:case value="SUCCESS">
									<!--<span title="SUCCESS" style="color:green;">&#10004;</span>-->
									<input type="radio" name="clientBuilds" id="${deployment.get('buildNum')}" value="${deployment.get('jobUrl')}"></input>
									<label title="SUCCESS" style="color:green;" for="${deployment.get('buildNum')}">       &#10004;</label>
								</j:case>
								<j:case value="FAILURE">
									<span title="FAILURE" style="color:darkred;">&#x2716;</span>
								</j:case>
								<j:case value="RUNNING">
									<span title="RUNNING" style="color:blue;">&#9658;</span>
								</j:case>
								<j:default>
									<span title="UNKNOWN" style="color:orange;">&#63;</span>
								</j:default>
							</j:switch>
						</td>
					</tr>
					</j:forEach>
				</table>
			</div>
		</j:forEach>
	</div>

	<br></br>

	<div id="PRDsection">
	
		<div id="startCRjobSection">
		<input type="checkbox" id="startcrjob"></input>
		<label for="startcrjob"> Start change request job upon successful deployment</label><br></br>
		</div>
		
		<div id="prd-env-cr-job" style="text-align: left">
			<label id="CRjobPrompt">  Please provide details for </label><label id="cr-job-dep">Placeholder for CR Job Dep Name</label><label id="CRjobPrompt2"> by clicking Properties button</label><div class="divider"/><input type="button" id="properties" value="Properties"></input>
			<br></br><br></br>	
		</div>
		
		<input type="checkbox" id="startnj"></input>
		<label id="startnjlabel" for="startnj"> Placeholder for previous activities</label><br></br>
		

		<div id="prd-env" style="text-align: left">
			<label id="njStartStepLabelQuestion">Do you want to start nightly job from a specific step (If No, the NJ will start from configured step which is usually step 1)?</label><div class="divider"/>
			<select id="njStartStepDecision" name="njStartStepDecision">
				<option value="">Choose...</option>
				<option value="no">No</option>
				<option value="yes">Yes</option>
			</select>
		</div>
		
		<div id="njstartstepSection">
			<label id="njstartstepLabel">Nightly job start step</label><div class="divider"/><input type="text" id="njstartstep" name="njstartstep"/><br></br>
		</div>
		
		<br></br>
		
		<div id="schedActivitySection">
			<input type="checkbox" id="schedActivity"></input>
			<label for="schedActivity"> Schedule this deployment/activity</label><br></br>
		</div>

		<div id="kickoffDateTimeSection">
		<label id="datetimepickerLabel">Placeholder for type of request</label><div class="divider"/><input id="datetimepicker" name="datetimepicker" type="text"/><br></br>
		<label id="datetimepickerDescriptionLabel">Uses America/New_York time zone</label>
		</div>
		
	</div>
	

	
	<input type="hidden" id="clientAcronym" value=""/>
	<input type="hidden" id="environment" value=""/>
	<input type="hidden" id="core_version" value=""/>
	<input type="hidden" id="build_num" value=""/>
	<input type="hidden" id="secondsToWait" value=""/>
	
	<!--<input type="hidden" id="ClientRevision" value=""/>-->
	
	<input type="hidden" id="webAction" value=""/>
	<input type="hidden" id="web_version" value=""/>
	<input type="hidden" id="webVersion" value=""/>
	<input type="hidden" id="binderyFrontendVersion" value=""/>
	
	
	
	<br></br>
	<br></br>
	<br></br>
	
	<div id="noRollbackSection">
	<input type="checkbox" id="norollback"></input>
	<label for="norollback"> Do not perform auto-rollback upon failed deployment</label><br></br>
	</div>
	
	<div id="runQASQLscriptSection">
	<input type="checkbox" id="runqascript"></input>
	<label for="runqascript"> Run QA SQL script</label>
	</div>
	
	<!--
	<div id="BackendDeploySection">
	</div>
	-->
	
	<br></br>
	
	<div id="buttons" style="text-align: right">
		<input type="submit" id="submit" value="Submit"/><div class="divider"/><span id="reset">Reset</span><div class="divider"/><span id="cancel">Cancel</span>
	</div>
	
</form>
<form id="dialog2" title="cr-job-title" style="display:none;" autocomplete="off">
	<!--<div id="CRjobsteps" style="display: none; height:200px; overflow: auto;">-->
	
		<!--<span id="customErrorPlacement2" style="color:red; font-weight:bold"></span><br></br>-->

		<div id="CRjobinfoTable" style="display: none; height:130px; overflow: auto;">
			<label id="CRjobstatusInfo">CR job status info</label>
			<table id="actualCRjobinfoTable" style="width=100%;" class="table table-bordered table-striped table-condensed">
				<tbody>
					<th style="width: 8%;text-align:center">start_step_id</th>
					<th style="width: 8%;text-align:center">date_modified</th>
					<th style="width: 8%;text-align:center">last_run_date</th>
					<th style="width: 8%;text-align:center">last_run_time</th>
					<th style="width: 8%;text-align:center">last_run_outcome</th>
					<th style="width: 8%;text-align:center">current_execution_status</th>
					<th style="width: 8%;text-align:center">current_execution_step</th>
					
				</tbody>
			</table>
		</div>
		
		<br></br>
		
		<div id="CRjobstepsTable" style="display: none; height:150px; overflow: auto;">
			<label id="CRjobstepsInfo">CR job steps</label>
			<table id="actualCRjobstepsTable" style="width=100%;" class="table table-bordered table-striped table-condensed hoverable-table-in-dialog">
				<tbody>
					<th style="width: 8%;text-align:center">step_id</th>
					<th style="width: 8%;text-align:center">step_name</th>
					<th style="width: 8%;text-align:center">subsystem</th>
					<th style="width: 8%;text-align:center">command</th>
					<th style="width: 8%;text-align:center">on_success_action</th>
					<th style="width: 8%;text-align:center">on_fail_action</th>
					<th style="width: 8%;text-align:center">choose</th>
				</tbody>
			</table>
		</div>
	
	<!--</div>-->
	
	<br></br>
	
	<div id="buttons2" style="text-align: left">
		<label id="CRjobstepActions">CR job step actions</label>
		<br></br>
		<input type="button" id="new" value="New"></input><div class="divider"/>
        <input type="button" id="edit" value="Edit"></input><div class="divider"/>
		<input type="button" id="delete" value="Delete"></input><div class="divider"/>
	</div>
	<br></br>
	
	
	<input type="hidden" id="activeDB" value=""/>
	<input type="hidden" id="activeServer" value=""/>
	
</form>
<div id="dialog3" title="Title place holder" style="display:none;">
  <p id="dialog3text">Place holder for message</p>
</div>
<form id="dialog4" title="cr-job-step-title" style="display:none;" autocomplete="off">
	<div id="stepnameDefinition" style="text-align: left">
		<label id="stepnameLabel">Step name:</label><div class="divider"/><input id="stepname" name="stepname" type="text" size="25" placeholder="Jira Ticket and step number"/><br></br>
		<br></br>
		
		<div id="commmandLabelAndParseSection">
			<label id="commandLabel">Command:</label>
			<br></br><br></br>
			<input type="button" id="parse" value="Parse" style="width:80px"></input>
		</div>
		
		<div id="textAreaSection">
			<textarea id="SQLscript" name="SQLscript" style="margin-left:10px;" rows="20" cols="90" placeholder="Please enter SQL script and make sure to specify name(s) of the database(s) in the query..."></textarea>
			<br></br>
			<label id="SQLscriptRequired"></label>
		</div>
		
		<br></br><br></br>
		
		<div id="on_success_actionAndon_fail_action" style="text-align: left">
			<label id="on_success_actionLabel">On success action:</label><div class="divider"/>
			<select id="on_success_actionDecision" name="on_success_actionDecision">
				<option value="">Choose...</option>
				<option value="quit with success">quit with success</option>
				<option value="goto next step">goto next step</option>
			</select>
			<div class="divider"/><div class="divider"/><div class="divider"/>
			<label id="on_fail_actionLabel">On failure action:</label><div class="divider"/>
			<select id="on_fail_actionDecision" name="on_fail_actionDecision">
			    <option value="">Choose...</option>
				<option value="quit with failure">quit with failure</option>
				<option value="goto next step">goto next step</option>
			</select>
		</div>
		
	</div>
</form>
</j:jelly>